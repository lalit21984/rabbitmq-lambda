AWSTemplateFormatVersion: 2010-09-09
Description: Sample Template for team Simple-CloudFormation for app
Transform: 'AWS::Serverless-2016-10-31' # Remove if not using a serverless function

Parameters:
  ## team TAGS
  pProduct:
    Description: Name of the instance
    Type: String
    Default: 'is'
  pEnvironment:
    Description: Environment Name
    Type: String
    Default: 'dev'
  pTagteamRole:
    Type: String
    AllowedValues:
      - app
      - web
      - db
    Default: 'app'
  pTagteamDataclass:
    Type: String
    AllowedValues:
      - public
      - private
      - conf
      - high-conf
    Default: high-conf
  pTagteamCustomerData:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  pTagteamTeamOwner:
    Type: String
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    Default: lalit.sahu@mail.com # REPLACE ME
  pTagteamLaunchedBy:
    Type: String
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    Default: lalit.sahu@mail.com # REPLACE ME
  pTagteamResourceCustodian:
    Type: String
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    Default: lalit.sahu@mail.com # REPLACE ME
  pVsadTag:
    #Type: 'AWS::SSM::Parameter::Value<String>'
    Type: String
    Description: VZ VSAD ID
    #Default: '/accounts/vsad/id'
    Default: 'Dummyvastid'
  pVastTag:
    #Type: 'AWS::SSM::Parameter::Value<String>'
    Type: String
    Description: VZ VAST ID
    #Default: '/accounts/vast/id'
    Default: 'Dummyvastid'
  # pALBAccessLogBucketParam:
  #   Type: 'AWS::SSM::Parameter::Value<String>'
  #   Description: ALB Access Log Bucket
  #   Default: '/accounts/logging/aws-load-balancer-log-bucket'
  # pLatestAMIImage:
  #   #Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  #    Type: String
  #   Description: SSM parameter for latest AMI ID
  #   Default: 'ami-00abfd8da690f984d'

  ## Pipeline Parameters
  pMainRegion:
    Type: String
    Description: Main Region for Infrastructure
    Default: us-east-1
  pRegion2Active:
    Type: String
    Description: Parameter to activate R2 or not
    Default: No
  pDeplAccountNumber:
    Description: Name of the instance
    Type: String
    Default: '810246177697'

  ## App Specific Parameters
  pVPCId:
    Description: VPC ID
    Type: String
    Default: 'vpc-098f2593862b9767b'
  pAppSubnets:
    Description: An Array of the App Subnet IDs
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-02ad3496839c3117a
  pAppSubnetCIDR1:
    Description: An Array of the Intranet Subnet IDs
    Type: String
    Default: '10.0.1.0/24'
  # pAppSubnetCIDR2:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: String
  # pAppSubnetCIDR3:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: String
  # pIntraSubnets:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: List<AWS::EC2::Subnet::Id>
  # pIntraSubnetCIDR1:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: String
  # pIntraSubnetCIDR2:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: String
  # pIntraSubnetCIDR3:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: String
  # pInstanceCount:
  #   Type: String
  #   Description: Instance Count for EC2 ASG
  # pMaxInstanceCount:
  #   Type: String
  #   Description: Max Instance Count for EC2 ASG
  # pDevInstanceCount:
  #   Type: String
  #   Description: Instance Count for EC2 ASG in Dev
  #   Default: will be overridden in dev
  # pDevMaxInstanceCount:
  #   Type: String
  #   Description: Max Instance Count for EC2 ASG in Dev
  #   Default: will be overridden in dev
  pInstanceWarmup:
    Type: String
    Description: Time in Seconds from Instance Launch Before Contributing to Scaling Metrics
    Default: 720
  pInstanceType:
    Type: String
    Description: Instance size for app
    Default: c5a.large
  pAutoscalingCPUTarget:
    Type: String
    Description: Target % of CPU Usage to Target for the Application ASG
    Default: 70 #(change 80 for dev )
  # pArtifactBucketKeyArn:
  #   Type: String
  #   Description: Arn of the Deployment Account Artifact Bucket KMS Key
  # pDbCidr:
  #   Type: CommaDelimitedList
  #   Description: Database Subnet CIDR blocks
  
  ## AmazonMQ specific Parameters
  pLambdaCodeBucket:
    Type: String
    Description: S3 Bucket that contains the Lambda Code for RabbitMQ
    Default: "cf-templates-s3uaul2id9rr-us-east-1"
  pObjectVersion:
    Type: String
    Description: S3 Version of the Lambda Code to use
    Default: "1"
  pAppSubnet1:
    Type: String
    Description: AppSubnet1 ID
    Default: 'subnet-02ad3496839c3117a'
  pAppSubnet2:
    Type: String
    Description: AppSubnet2 ID
    Default: 'None'
  pAppSubnet3:
    Type: String
    Description: AppSubnet3 ID
    Default: 'None'
  pAdminUsername:
    Description: The admin username for RabbitMQ (Can't contain commas, colons, equals signs, or spaces)
    Type: String
    Default: rabbit-admin
    MinLength: 12
  # pMQcidr1:
  #   Description: CIDR Range for Intra1 subnet for MQ Custom DNS
  #   Type: String
  # pMQcidr2:
  #   Description: CIDR Range for Intra2 subnet for MQ Custom DNS
  #   Type: String
  # pMQcidr3:
  #   Description: CIDR Range for Intra3 subnet for MQ Custom DNS
  #   Type: String
    
  # pPostgreSQLIP:
  #   Description: IP address of the team Destination DB Cluster
  #   Type: String

Conditions:
  cIsMainRegion: !Equals [!Ref AWS::Region, !Ref pMainRegion]
  cIsR2: !Not [!Condition cIsMainRegion]
  cIsR2Active: !Equals [!Ref pRegion2Active, "Yes"]
  cIsR2andActive: !And [!Condition cIsR2, !Condition cIsR2Active]
  cIsR2ActiveOrIsMain: !Or [!Condition cIsMainRegion, !Condition cIsR2andActive]
  cIsPreProd: !Equals [!Ref pEnvironment, "preprod"]
  cIsProd: !Equals [!Ref pEnvironment, "prod"]
  cIsNonProd: !Not [!Condition cIsProd]
  cIsDev: !Equals [!Ref pEnvironment, "dev"]
  #cIsapp3: !Or [!Condition cIsDev, !Condition cIsProd] ## Create app3 Server when environment is 'dev' or 'prod'
  # cIsPreProd: !Equals [!Ref pEnvironment, "preprod"]
  # cIsEitherProd: !Or [!Condition cIsPreProd, !Condition cIsProd]

Resources:
  ### Application server cluster IAM resources
  # rApplicationInstanceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub ${pProduct}-role-${pEnvironment}-instance-${AWS::Region}
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Action: sts:AssumeRole
  #           Effect: Allow
  #           Principal:
  #             Service: ec2.amazonaws.com
  #       Version: "2012-10-17"
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  #       - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  #     PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/team-fed-svcrole-boundary
  #     Policies:
  #       - PolicyName: AllowKMSAccess
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:   
  #             - Sid: allowsecretaccess
  #               Effect: Allow
  #               Action:
  #                 - secretsmanager:GetSecretValue
  #               Resource: 
  #                 - !ImportValue iSSPubArn
  #                 - !ImportValue iSSPrivArn
  #                 - !Sub arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:ab-app-aurora-postgresql/aurora/*
  #                 - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:ab-app-app-secret-${pEnvironment}-rabbituser*
  #                 - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${pProduct}-secret-${pEnvironment}-iotOracledbPassword*
  #             - Sid: allowkmsforsecrets
  #               Effect: Allow
  #               Action:
  #                 - kms:DescribeKey
  #                 - kms:Decrypt
  #                 - kms:Encrypt
  #                 - kms:GenerateDataKey
  #               Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
  #               Condition:
  #                 ForAnyValue:StringLike:
  #                   kms:ResourceAliases:
  #                     - !Sub alias/ab-app2-app-app-ss-secrets
  #                     - !Sub alias/ab-app-aurora-postgresql-db-root-secret-key
  #                     - !Sub alias/ab-app-aurora-postgresql-db-user-secret-key
  #                     - !Sub alias/ab-app-aurora-postgresql-AuroraClusterKey
  #                     - !Sub alias/${pProduct}-rabbit-user-pwd-key
  #                     - !Sub alias/${pProduct}-iotOracledb-pwd-key
  #             - Sid: allowkmsfors3
  #               Effect: Allow
  #               Action:
  #                 - kms:DescribeKey
  #                 - kms:Decrypt
  #                 - kms:Encrypt
  #                 - kms:GenerateDataKey
  #               Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
  #               Condition:
  #                 ForAnyValue:StringLike:
  #                   kms:ResourceAliases:
  #                     - !Sub alias/ab-app2-app-app-alias-${pEnvironment}-userdata-${AWS::Region}
  #                     - !Sub alias/ab-app2-app-app-alias-${pEnvironment}-userdata
  #             - Sid: allowkmsfordepls3
  #               Effect: Allow
  #               Action:
  #                 - kms:DescribeKey
  #                 - kms:Decrypt
  #                 - kms:Encrypt
  #                 - kms:GenerateDataKey
  #               Resource: '*'
  #       - PolicyName: AllowServiceVerificationBucketAccess
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Sid: allows3getartifact
  #               Effect: Allow
  #               Action:
  #                 - s3:Get*
  #                 - s3:Put*
  #               Resource: 
  #                 # - !Sub arn:aws:s3:::${pProduct}-s3-${pEnvironment}-app3-${AWS::Region}/*
  #                 - !Sub arn:aws:s3:::ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/*
  #                 - arn:aws:s3:::team-device-app-jenkins-s3/*
  #                 - arn:aws:s3:::team-device-app-jenkins-s3-us-west-2/*
  #             - Sid: allows3list
  #               Effect: Allow
  #               Action:
  #                 - s3:ListBucket
  #               Resource: 
  #                 - arn:aws:s3:::team-device-app-jenkins-s3/*
  #                 - arn:aws:s3:::team-device-app-jenkins-s3-us-west-2/*
  #       - PolicyName: CodeDeployAccess
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Sid: allowcodedeploystop
  #               Effect: Allow
  #               Action:
  #                 - codedeploy:ListDeployments
  #                 - codedeploy:StopDeployment
  #                 - codedeploy:GetDeployment
  #                 - codedeploy:ListDeploymentInstances
  #               Resource:
  #                 - !Sub arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:* #${ApplicationName}/${DeploymentGroupName}
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-role-${pEnvironment}-instance-${AWS::Region}
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: IAM Role for Application EC2 Instance
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  # rApplicationInstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Roles:
  #       - !Ref rApplicationInstanceRole

  # rApplicationSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: !Sub ${pProduct}-secgroup-${pEnvironment}-instances
  #     VpcId: !Ref pVPCId
  #     GroupDescription: Enable Outbound Internet and Console NLB Ingress Access to Application Instances
  #     SecurityGroupIngress:
  #       - IpProtocol: -1
  #         FromPort: -1
  #         ToPort: -1
  #         CidrIp: 127.0.0.1/32
  #         Description: Default local host all traffic
  #       # - IpProtocol: tcp
  #       #   FromPort: 1000
  #       #   ToPort: 1000
  #       #   SourceSecurityGroupId: !Ref rConsoleALBSecurityGroup
  #       # - IpProtocol: tcp
  #       #   FromPort: 443
  #       #   ToPort: 443
  #       #   SourceSecurityGroupId: !Ref rConsoleALBSecurityGroup    
  #       # - IpProtocol: tcp
  #       #   FromPort: 1000
  #       #   ToPort: 1000
  #       #   SourceSecurityGroupId: !Ref rPublicALBSecurityGroup01
  #       # - IpProtocol: tcp
  #       #   FromPort: 443
  #       #   ToPort: 443
  #       #   SourceSecurityGroupId: !Ref rPublicALBSecurityGroup01
  #     SecurityGroupEgress:
  #     # IOT DB connection to on-prem
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/32
  #         FromPort: 80
  #         ToPort: 80
  #         Description: Allow Outbound to New Relic Proxy
  #       ##RabbitMQ
  #       - IpProtocol: tcp
  #         FromPort: 443
  #         ToPort: 443
  #         DestinationSecurityGroupId: !Ref rRabbitMQClusterSecurityGroup
  #         Description: Egress to Amazon MQ for Rabbit MQ
  #       - IpProtocol: tcp
  #         FromPort: 5671
  #         ToPort: 5671
  #         DestinationSecurityGroupId: !Ref rRabbitMQClusterSecurityGroup
  #         Description: Egress to Amazon MQ for Rabbit MQ  
  #       # - IpProtocol: tcp
  #       #   FromPort: 5671
  #       #   ToPort: 5671
  #       #   CidrIp: !Ref pMQcidr1
  #       #   Description: Egress to IntraSubnet1 for Rabbit MQ Custom DNS
  #       # - IpProtocol: tcp
  #       #   FromPort: 5432
  #       #   ToPort: 5432
  #       #   CidrIp: !Select [0, !Ref pDbCidr]
  #       #   Description: Egress to Aurora Global DB Subnet 1
  #       # - IpProtocol: tcp
  #       #   FromPort: 5432
  #       #   ToPort: 5432
  #       #   CidrIp: !Select [1, !Ref pDbCidr]
  #       #   Description: Egress to Aurora Global DB Subnet 2
  #       # - IpProtocol: tcp
  #       #   FromPort: 5432
  #       #   ToPort: 5432
  #       #   CidrIp: !Select [2, !Ref pDbCidr]
  #       #   Description: Egress to Aurora Global DB Subnet 3
  #       # - !If
  #       #   - cIsDev
  #       #   - !Ref AWS::NoValue
  #       #   - IpProtocol: tcp
  #       #     FromPort: 5671
  #       #     ToPort: 5671
  #       #     CidrIp: !Ref pMQcidr2
  #       #     Description: Egress to IntraSubnet2 for Rabbit MQ Custom DNS  
  #       # - !If
  #       #   - cIsDev
  #       #   - !Ref AWS::NoValue
  #       #   - IpProtocol: tcp
  #       #     FromPort: 5671
  #       #     ToPort: 5671
  #       #     CidrIp: !Ref pMQcidr3
  #       #     Description: Egress to IntraSubnet3 for Rabbit MQ Custom DNS  
  #       ###Add rules for AWS Postgress Database connection CIDRs when acquired####
        
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-secgroup-${pEnvironment}-instances
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: Security Group to allow access to Application Instances by Console ALB
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  # ### Application ASG/Target Group/Template Resources
  # rApplicationTargetGroupConsole:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Sub ${pProduct}-tg-${pEnvironment}
  #     Port: 1000
  #     Protocol: "HTTPS" #S
  #     VpcId: !Ref pVPCId
  #     HealthCheckEnabled: true
  #     HealthyThresholdCount: 5
  #     UnhealthyThresholdCount: 2
  #     HealthCheckProtocol: "HTTPS"
  #     HealthCheckPort: 1000
  #     HealthCheckPath: "/app/isAlive.jsp"
  #     # TargetGroupAttributes: 
  #     #   - Key: stickiness.enabled
  #     #   - Value: true
  #     #   # - Key: stickiness.type
  #     #   # - Value: lb_cookie
  #     #   # - Key: stickiness.lb_cookie.duration_seconds
  #     #   # - Value: 3600
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-tg-${pEnvironment}-console
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: Target Group for Application Instances
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  # rApplicationTargetGroupConsoleiot:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Sub ${pProduct}-tg-${pEnvironment}-con-iot
  #     Port: 1000
  #     Protocol: "HTTPS" #S
  #     VpcId: !Ref pVPCId
  #     HealthCheckEnabled: true
  #     HealthyThresholdCount: 5
  #     UnhealthyThresholdCount: 2
  #     HealthCheckProtocol: "HTTPS"
  #     HealthCheckPort: 1000
  #     HealthCheckPath:  "/app/iot/isAlive.jsp"
  #     # TargetGroupAttributes: 
  #     #   - Key: stickiness.enabled
  #     #   - Value: true
  #     #   # - Key: stickiness.type
  #     #   # - Value: lb_cookie
  #     #   - Key: stickiness.lb_cookie.duration_seconds
  #     #   - Value: 3600
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-tg-${pEnvironment}-console-iot
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: Target Group for Application Instances
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  # ###app3 Network Load Balancer target group
  # rApplicationTargetGroupPublic:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Sub ${pProduct}-tg-${pEnvironment}-public-1
  #     Port: 1000
  #     Protocol: HTTPS
  #     VpcId: !Ref pVPCId
  #     HealthCheckEnabled: true
  #     HealthyThresholdCount: 5
  #     UnhealthyThresholdCount: 2
  #     HealthCheckProtocol: "HTTPS"
  #     HealthCheckPort: 1000
  #     HealthCheckPath: "/app/isAlive.jsp"
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-tg-${pEnvironment}-public
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: Target Group for Application Instances
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  # rApplicationTargetGroupPubliciot:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Sub ${pProduct}-tg-${pEnvironment}-pub-iot
  #     Port: 1000
  #     Protocol: HTTPS
  #     VpcId: !Ref pVPCId
  #     HealthCheckEnabled: true
  #     HealthyThresholdCount: 5
  #     UnhealthyThresholdCount: 2
  #     HealthCheckProtocol: "HTTPS"
  #     HealthCheckPort: 1000
  #     HealthCheckPath: "/app/iot/isAlive.jsp"
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-tg-${pEnvironment}-pub-iot
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: Target Group for Application Instances
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  # rApplicationInstanceASG:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   CreationPolicy:
  #     ResourceSignal:
  #       Count: 
  #         !If
  #           - cIsMainRegion
  #           - !If
  #               - cIsDev
  #               - !Ref pDevInstanceCount
  #               - !Ref pInstanceCount
  #           - !If
  #               - cIsR2andActive
  #               - !If
  #                   - cIsDev
  #                   - !Ref pDevInstanceCount
  #                   - !Ref pInstanceCount
  #               - 0 # First deployment to R2 behavior (starting on or off)
  #       Timeout: PT18M
  #   UpdatePolicy:
  #     AutoScalingRollingUpdate:
  #       !If
  #         - cIsMainRegion
  #         - 
  #           PauseTime: PT18M # Region 1 constant behavior
  #           WaitOnResourceSignals: true
  #         - !If
  #             - cIsR2andActive
  #             - 
  #               PauseTime: PT18M # Region 2 activated/updated behavior
  #               WaitOnResourceSignals: true
  #             - 
  #               !Ref AWS::NoValue # Tear down R2 behavior
  #   Properties:
  #     AutoScalingGroupName: !Sub ${pProduct}-asg-${pEnvironment}-instances-1
  #     MinSize:
  #       !If
  #         - cIsR2ActiveOrIsMain
  #         - !If
  #           - cIsDev
  #           - !Ref pDevInstanceCount
  #           - !Ref pInstanceCount
  #         - '0'
  #     MaxSize: 
  #       !If 
  #         - cIsR2ActiveOrIsMain
  #         - !If
  #           - cIsDev
  #           - !Ref pDevMaxInstanceCount
  #           - !Ref pMaxInstanceCount
  #         - '0'
  #     DesiredCapacity: 
  #       !If 
  #         - cIsR2ActiveOrIsMain
  #         - !If
  #           - cIsDev
  #           - !Ref pDevInstanceCount
  #           - !Ref pInstanceCount
  #         - '0'

  #     TargetGroupARNs:
  #       - !Ref rApplicationTargetGroupConsole
  #       - !Ref rApplicationTargetGroupPublic
  #       - !Ref rApplicationTargetGroupPubliciot
  #       - !Ref rApplicationTargetGroupConsoleiot
  #     HealthCheckGracePeriod: 300
  #     NewInstancesProtectedFromScaleIn: false
  #     LaunchTemplate:
  #       LaunchTemplateId: !Ref rApplicationLaunchTemplate
  #       Version: !GetAtt rApplicationLaunchTemplate.LatestVersionNumber
  #     VPCZoneIdentifier: !Ref pAppSubnets
  #     MetricsCollection:
  #       - Granularity: "1Minute"
  #         Metrics:
  #           - "GroupMinSize"
  #           - "GroupMaxSize"
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-asg-${pEnvironment}-instances
  #         PropagateAtLaunch: false
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #         PropagateAtLaunch: true
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #         PropagateAtLaunch: true
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner
  #         PropagateAtLaunch: true
  #       - Key: team:customer-data
  #         Value: !Ref pTagteamCustomerData
  #         PropagateAtLaunch: true
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #         PropagateAtLaunch: true
  #       - Key: team:ec2:os
  #         Value: amazon.linux.2
  #         PropagateAtLaunch: true
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #         PropagateAtLaunch: true
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #         PropagateAtLaunch: true
  #       - Key: team:purpose
  #         Value: AutoScaling Group for Application Instances
  #         PropagateAtLaunch: false
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #         PropagateAtLaunch: true
  #       - Key: team:role
  #         Value: !Ref pTagteamRole
  #         PropagateAtLaunch: true

  # rApplicationASGScalingPolicy:
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   Properties: 
  #     AutoScalingGroupName: !Ref rApplicationInstanceASG
  #     EstimatedInstanceWarmup: !Ref pInstanceWarmup
  #     # MetricAggregationType: Average
  #     PolicyType: TargetTrackingScaling
  #     TargetTrackingConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ASGAverageCPUUtilization
  #       TargetValue: !Ref pAutoscalingCPUTarget

  # rApplicationLaunchTemplate:
  #   Type: AWS::EC2::LaunchTemplate
  #   Properties:
  #     LaunchTemplateName: !Sub ${pProduct}-launchtemp-${pEnvironment}-instances
  #     LaunchTemplateData:
  #       BlockDeviceMappings:
  #         - DeviceName: /dev/xvda
  #           Ebs:
  #             DeleteOnTermination: true
  #             Encrypted: true
  #             VolumeSize: !If [cIsNonProd, 50, 100]
  #             VolumeType: gp3
  #         - DeviceName: /dev/xvdf # /dev/sdf
  #           Ebs:
  #             DeleteOnTermination: true
  #             Encrypted: true
  #             VolumeSize: !If [cIsNonProd, 150, 200]
  #             VolumeType: sc1
  #       IamInstanceProfile:
  #         Name: !Ref rApplicationInstanceProfile
  #       ImageId: ami-00abfd8da690f984d
  #       InstanceType: !Ref pInstanceType #c5a.large
  #       MetadataOptions:
  #         HttpEndpoint: enabled
  #         HttpPutResponseHopLimit: 2
  #         HttpTokens: required
  #       Monitoring:
  #         Enabled: true
  #       SecurityGroupIds:
  #         - !Ref rApplicationSecurityGroup
  #       TagSpecifications:
  #         - ResourceType: instance
  #           Tags: 
  #             - Key: Name
  #               Value: !Sub ${pProduct}-${pEnvironment}-instance
  #             - Key: team:launched-by
  #               Value: !Ref pTagteamLaunchedBy
  #             - Key: team:resource-custodian
  #               Value: !Ref pTagteamResourceCustodian
  #             - Key: team:team-owner
  #               Value: !Ref pTagteamTeamOwner
  #             - Key: team:customer-data
  #               Value: !Ref pTagteamCustomerData
  #             - Key: team:dataclass
  #               Value: !Ref pTagteamDataclass
  #             - Key: team:ec2:os
  #               Value: amazon.linux.2
  #             - Key: team:vast-id
  #               Value: !Ref pVastTag
  #             - Key: team:vsad
  #               Value: !Ref pVsadTag
  #             - Key: team:purpose
  #               Value: Application Instance
  #             - Key: team:lifecycle
  #               Value: !Ref pEnvironment
  #             - Key: team:role
  #               Value: !Ref pTagteamRole
  #       UserData: # Application ASG User Data. If this script ends up causing issues we should turn on the ASG check ins
  #         Fn::Base64:
  #           !Sub 
  #           - |
  #             #!/bin/bash -xe

  #             notify() {
  #               echo "UserData was unsuccessful!"

  #               deployments=`aws deploy list-deployments --application-name ab-app-app-cdapplication-${pEnvironment} --deployment-group-name ab-app-app-cddeplgroup-${pEnvironment} --include-only-statuses "InProgress" | jq .deployments`
  #               deployments_arr=( $(echo $deployments | sed -e 's/\[//g' -e 's/\]//g' -e 's/\,/ /g' -e 's/\"//g') );

  #               TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
  #               INSTANCE_ID=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id`

  #               for i in "${!deployments_arr[@]}"
  #               do
  #                   instances=`aws deploy list-deployment-instances --deployment-id $i | jq .instancesList`
  #                   instances_arr=( $(echo $instances | sed -e 's/\[//g' -e 's/\]//g' -e 's/\,/ /g' -e 's/\"//g') );
                    
  #                   for y in "${!instances_arr[@]}"
  #                   do
  #                       if [ "$INSTANCE_ID" = "$y" ]; then
  #                           aws deploy stop-deployment --deployment-id $i
  #                           DONE="True"
  #                           break
  #                       fi
  #                   done

  #                   if [ "$DONE" = "True" ]; then
  #                       break
  #                   fi

  #               done

  #               cp /var/log/cloud-init-output.log /home/ec2-user/cloud-init-output-app-`date +%Y-%m-%d-%H-%M-%S`.log
  #               aws s3 cp /home/ec2-user/cloud-init-output-app-`date +%Y-%m-%d-%H-%M-%S`.log s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region} --sse aws:kms --sse-kms-key-id alias/ab-app2-app-app-alias-${pEnvironment}-userdata
                
  #               /opt/aws/bin/cfn-signal -s false \
  #                 --stack ${AWS::StackName} \
  #                 --resource rApplicationInstanceASG \
  #                 --region ${AWS::Region}
  #             }
  #             trap 'notify' ERR

  #             #1) Time change needs to be added to app and app3
  #             rm -f /etc/localtime
  #             ln -s /usr/share/zoneinfo/America/New_York /etc/localtime

  #             # Set Proxy for YUM
  #             export http_proxy=http://${PROXY_NAME}.team.verizon.com:8080
  #             export https_proxy=http://${PROXY_NAME}.team.verizon.com:8080
  #             export NO_PROXY=169.254.169.254

  #             # Format and Mount Attached Volume
  #             mkfs -t xfs /dev/nvme1n1
  #             mkdir /log
  #             mount /dev/nvme1n1 /log

  #             # Make Volume Re Mount On Reboot
  #             export UUID_LINE=`blkid | grep /dev/nvme1n1`
  #             export UUID=`echo $UUID_LINE | cut -d " " -f2`
  #             UUID=`echo $UUID | sed 's/"//g'`
  #             echo "$UUID  /log  xfs  defaults,nofail  0  2" >> /etc/fstab

  #             # Update Yum and Install Ruby and wget
  #             sudo tee /etc/yum.repos.d/pgdg.repo<<EOF
  #             [pgdg14]
  #             name=PostgreSQL 14 for RHEL/CentOS 7 - x86_64
  #             baseurl=https://download.postgresql.org/pub/repos/yum/14/redhat/rhel-7-x86_64
  #             enabled=1
  #             gpgcheck=0
  #             EOF
  #             yum-complete-transaction
  #             sleep 5
  #             yum update -y --exclude amazon-ssm-agent*
  #             sleep 5
  #             yum install -y ruby wget
  #             sleep 5
  #             #yum install -y postgresql-libs-9.2.24-1.amzn2.0.1.x86_64 
  #             yum install -y postgresql14-libs.x86_64
  #             sleep 5
  #             #yum install -y postgresql-9.2.24-1.amzn2.0.1.x86_64
  #             #sleep 5
  #             amazon-linux-extras install postgresql14

  #             # NewRelic
  #             cd /etc/yum.repos.d/
  #             aws s3 cp s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/userdata/newrelic-infra.zip /etc/yum.repos.d/newrelic-infra.zip
  #             unzip newrelic-infra.zip
  #             mv newrelic-infra/newrelic-infra.repo .
  #             mv /etc/yum.repos.d/newrelic-infra/newrelic-infra.yml /etc/
  #             rm newrelic-infra.zip
  #             rm -rf newrelic-infra
  #             sleep 30
  #             sudo yum install newrelic-infra -y || true # Or'ed with true to ignore errors
  #             systemctl start newrelic-infra || true # Or'ed with true to ignore errors

  #             # Unset Proxy for YUM
  #             unset http_proxy
  #             unset https_proxy

  #             # Download Files From S3
  #             cd /home/ec2-user/
  #             aws s3 cp s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/userdata/app.zip .
  #             aws s3 cp s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/userdata/libssl_files.zip .
  #             aws s3 cp s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/userdata/app_splunk.zip .

  #             # Unzip All Zip Files
  #             unzip app.zip
  #             unzip libssl_files.zip
  #             #unzip siteminder.zip
  #             unzip app_splunk.zip

  #             # Remove Unneeded Zip Files
  #             rm app.zip
  #             rm libssl_files.zip
  #             #rm siteminder.zip

  #             # Create and Move Needed Directories
  #             mkdir -p /apps/opt
  #             #mv siteminder /apps/opt/
  #             mv app /app

  #             # Maybe not required TBD
  #             mkdir -p /app/opt
  #             mkdir -p /app/infra
  #             mkdir -p /log/appserver/app01
  #             mkdir -p /log/appserver/appiot01
  #             #ln -s /apps/opt/siteminder /app/opt/siteminder

  #             # Set Java Permanetly On PATH For All Users
  #             chmod +x /app/jdk/jdk1.8.0_161/bin/java
  #             echo 'export JAVA_HOME="/app/jdk/jdk1.8.0_161"' >> /etc/profile.d/java_home.sh
  #             echo 'export LS_JAVA_HOME="/app/jdk/jdk1.8.0_161"' >> /etc/profile.d/java_home.sh
  #             echo 'export PATH=$JAVA_HOME/bin:$PATH' >> /etc/profile.d/java_home.sh
  #             source /etc/profile
  
  #             # Run hosts.sh and Setup Hostname File(s)
  #             chmod +x /app/hosts.sh
  #             vim "+set ff=unix" "+wq" /app/hosts.sh
  #             /app/./hosts.sh
              
  #             # Registration Commands
  #             #cd /apps/opt/siteminder/webagent
  #             #. ./ca_wa_env.sh
  #             #cd /apps/opt/siteminder/webagent/bin
  #             #./smreghost -i onesso-uatb01.ebiz.verizon.com -hn MYVZSERVICETEST-UAT-1-appreg-key -sh "uvt30B3OcempHeev7aMWVBJQ2r3QDd3rXfXJK99iiknHWyySM6UEE2QbOvgOSDcRfJW5upxN5i7i5NMTUAtSBAgekNvbsx6vLP1f7qvi5ZJ9MXQmNgM9n9XRFvr/VobR" -hc app2-diagnostic-HCO -f /apps/opt/siteminder/webagent/config/SmHost.conf
  #             #chmod 777 /apps/opt/siteminder/webagent/config/SmHost.conf
  #             cd /home/ec2-user/

  #             # Create Directories and Move Files
  #             mv libssl_files/libssl.so.1.1.1k /usr/lib64
  #             mv libssl_files/libcrypto.so.1.1.1k /usr/lib64
  #             rm -rf libssl_files
  #             mkdir -p /log/webserver/app01
  #             mkdir -p /log/appserver/app-console01 
  #             mkdir -p /log/appserver/app-profile01
  #             mkdir -p /log/appserver/app-upload01
  #             mkdir -p /log/app2DownloadLogs
  #             mkdir -p /app/app/APK
  #             mkdir -p /app/SSKU/APK
  #             mkdir -p /app/FP/APK
  #             mkdir -p /app/BYOD/APK

  #             # Adjust File Permissions As Needed By Agent Scripts
  #             chmod +x /app/webserver/apache/bin/httpd
  #             chmod +x /app/webserver/apache/bin/rotatelogs

  #             # Create Symlinks In /usr/lib64 For httpd
  #             cd /usr/lib64
  #             ln -s libssl.so.1.1.1k libssl.so.1.1
  #             ln -s libcrypto.so.1.1.1k libcrypto.so.1.1
  #             cd /home/ec2-user/

  #             # Install Code Deploy Agent
  #             wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
  #             chmod +x ./install
  #             sudo ./install auto
  #             rm -f install
  #             sed -i "s#:proxy_uri:#:proxy_uri: 'http://${PROXY_NAME}.team.verizon.com:8080'#g" /etc/codedeploy-agent/conf/codedeployagent.yml
  #             sudo service codedeploy-agent restart

  #             # Setup Kafka
  #             chmod +x /app/kafka/app2/kafka_logging/start_kafka_app.sh
  #             chmod +x /app/kafka/app2/kafka_logging/app/logstash-7.16.3/bin/logstash

  #             # Pull Self-Signed Cert Files from Secrets Manager
  #             mkdir -p /app/webserver/ssl
  #             aws secretsmanager get-secret-value --secret-id ${IMPORT_PUB} | jq -r ".SecretString" > /app/webserver/ssl/${CERT_NAME}.team.verizon.com.crt
  #             aws secretsmanager get-secret-value --secret-id ${IMPORT_PRIV} | jq -r ".SecretString" > /app/webserver/ssl/web-${pEnvironment}.key
  #             aws secretsmanager get-secret-value --secret-id ${IMPORT_PRIV} | jq -r ".SecretString" > /app/webserver/ssl/web.key

              
  #             #Place the files under 
  #             cp app_splunk/* /etc/otel/collector/fluentd/conf.d/
  #             chown -R td-agent:td-agent /etc/otel/collector/fluentd/conf.d/*
  #             #the owner of the files should be td-agent:td-agent
  #             #add the permissions as 755
  #             chmod 755 /etc/otel/collector/fluentd/conf.d/*
  #             #Then restart the td-agent, command is below  
  #             sudo service td-agent restart

  #             # Create was User to Run the Agents and Application
  #             groupadd was
  #             useradd was -g was -s /sbin/nologin
              
  #             # Change /app /log Permissions to Allow Webserver Useage of Files
  #             cd /app
  #             chown -R was:was *
  #             chmod -R 755 /app
  #             cd /log
  #             chown -R was:was *
  #             chmod -R 755 /log
  #             cd /apps
  #             chown -R was:was *
  #             chmod -R 755 /apps

  #             # splunk changes
  #             chmod -R 777 /log/appserver
  #             sudo -u was bash -c 'setfacl -R -d -m u::rwx /log/appserver/*'
  #             sudo -u was bash -c 'setfacl -R -d -m g::rwx /log/appserver/*'
  #             sudo -u was bash -c 'setfacl -R -d -m o::rwx /log/appserver/*'

  #             # send cfn-singal to cloudformation
  #             /opt/aws/bin/cfn-signal -s true --stack ${AWS::StackName} --resource rApplicationInstanceASG --region ${AWS::Region} || true # Or'ed with true to ignore errors

  #           - IMPORT_PUB:
  #               !ImportValue iSSPubArn
  #             IMPORT_PRIV:
  #               !ImportValue iSSPrivArn
  #             PROXY_NAME:
  #               !If
  #                 - cIsProd
  #                 - proxy
  #                 - proxy-nonprod
  #             CERT_NAME:
  #               !If
  #                 - cIsProd
  #                 - app2
  #                 - !Sub app2-${pEnvironment}
    
  # rCrossAccountDeplRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub ${pProduct}-role-${pEnvironment}-jenkinsxaccount-${AWS::Region}
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Action: sts:AssumeRole
  #           Effect: Allow
  #           Principal:
  #             AWS: !Ref pDeplAccountNumber
  #       Version: "2012-10-17"
  #     PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/team-fed-svcrole-boundary
  #     Policies:
  #       - PolicyName: crossaccountdepl
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Sid: AllowJenkinsS3
  #               Effect: Allow
  #               Action:
  #                 - s3:GetObject*
  #                 - codecommit:ListBranches
  #                 - codecommit:ListRepositories
  #               Resource:
  #                 - arn:aws:s3:::team-device-app-jenkins-s3/*
  #                 - arn:aws:s3:::team-device-app-jenkins-s3-us-west-2/*
  #             - Sid: AllowJenkinsCodeDeploy
  #               Effect: Allow
  #               Action:
  #                 - codedeploy:CreateDeployment
  #                 - codedeploy:GetDeployment
  #                 - codedeploy:GetDeploymentConfig
  #                 - codedeploy:GetApplicationRevision
  #                 - codedeploy:RegisterApplicationRevision
  #               Resource: 
  #                 - !Sub arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:*/*
  #                 - !Sub arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:*
  #                 - !Sub arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-role-${pEnvironment}-jenkinsxaccount-${AWS::Region}
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: IAM Role for XAccount CodeDeploy From Jenkins
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner
  # ### Application Deployment Resources
  # rApplicationDeployApp:
  #   Type: AWS::CodeDeploy::Application
  #   Properties:
  #     ApplicationName: !Sub ${pProduct}-cdapplication-${pEnvironment}
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-cdapplication-${pEnvironment}
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: CodeDeploy Application for Application Instances
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  # rApplicationDeploymentGroup:
  #   Condition: cIsR2ActiveOrIsMain
  #   Type: AWS::CodeDeploy::DeploymentGroup
  #   Properties:
  #     ApplicationName: !Ref rApplicationDeployApp
  #     DeploymentGroupName: !Sub ${pProduct}-cddeplgroup-${pEnvironment}
  #     DeploymentConfigName: CodeDeployDefault.OneAtATime
  #     AutoScalingGroups:
  #       - !Ref rApplicationInstanceASG
  #     DeploymentStyle:
  #       DeploymentOption: WITH_TRAFFIC_CONTROL
  #       DeploymentType: IN_PLACE
  #     LoadBalancerInfo:
  #       TargetGroupInfoList:
  #         - Name: !GetAtt rApplicationTargetGroupConsole.TargetGroupName
  #     AutoRollbackConfiguration:
  #       Enabled: true
  #       Events:
  #         - DEPLOYMENT_FAILURE
  #         - DEPLOYMENT_STOP_ON_ALARM
  #         - DEPLOYMENT_STOP_ON_REQUEST
  #     ServiceRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/CodePipeline-Action

  #app3 Resources
  ## app3 Cluster IAM Resources
  # rapp3InstanceRole:
  #   #Condition: cIsProd
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub ${pProduct}-role-${pEnvironment}-app3-${AWS::Region}
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Action: sts:AssumeRole
  #           Effect: Allow
  #           Principal:
  #             Service: ec2.amazonaws.com
  #       Version: "2012-10-17"
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  #       - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  #     PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/team-fed-svcrole-boundary
  #     Policies:
  #       - PolicyName: AllowKMSAccess
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:   
  #             - Sid: allowsecretaccess
  #               Effect: Allow
  #               Action:
  #                 - secretsmanager:GetSecretValue
  #               Resource: 
  #                 - !ImportValue iSSPubArn
  #                 - !ImportValue iSSPrivArn
  #                 - !Sub arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:ab-app-aurora-postgresql/aurora/*
  #                 - !Sub arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:ab-app-app-secret-${pEnvironment}-rabbituser*
  #             - Sid: allowkmsforsecrets
  #               Effect: Allow
  #               Action:
  #                 - kms:DescribeKey
  #                 - kms:Decrypt
  #                 - kms:Encrypt
  #                 - kms:GenerateDataKey
  #               Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
  #               Condition:
  #                 ForAnyValue:StringEquals:
  #                   kms:ResourceAliases:
  #                     - !Sub alias/ab-app2-app-app-ss-secrets
  #                     - !Sub alias/ab-app-aurora-postgresql-db-root-secret-key
  #                     - !Sub alias/ab-app-aurora-postgresql-db-user-secret-key
  #                     - !Sub alias/ab-app-aurora-postgresql-AuroraClusterKey
  #                     - !Sub alias/${pProduct}-rabbit-user-pwd-key  
  #             - Sid: allowkmsfors3
  #               Effect: Allow
  #               Action:
  #                 - kms:DescribeKey
  #                 - kms:Decrypt
  #                 - kms:Encrypt
  #                 - kms:GenerateDataKey
  #               Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
  #               Condition:
  #                 ForAnyValue:StringEquals:
  #                   kms:ResourceAliases:
  #                     - !Sub alias/ab-app2-app-app-alias-${pEnvironment}-userdata
  #                     - !Sub alias/ab-app2-app-app-alias-${pEnvironment}-userdata-us-west-2
  #             - Sid: allowkmsfordepls3
  #               Effect: Allow
  #               Action:
  #                 - kms:DescribeKey
  #                 - kms:Decrypt
  #                 - kms:Encrypt
  #                 - kms:GenerateDataKey
  #               Resource: '*'
  #       - PolicyName: AllowServiceVerificationBucketAccess
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Sid: allows3getartifact
  #               Effect: Allow
  #               Action:
  #                 - s3:Get*
  #                 - s3:Put*
  #               Resource: 
  #                 # - !Sub arn:aws:s3:::${pProduct}-s3-${pEnvironment}-app3-${AWS::Region}/*
  #                 - !Sub arn:aws:s3:::ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/*
  #                 - arn:aws:s3:::team-device-app-jenkins-s3/*
  #                 - arn:aws:s3:::team-device-app-jenkins-s3-us-west-2/*
  #             - Sid: allows3list
  #               Effect: Allow
  #               Action:
  #                 - s3:ListBucket
  #               Resource: 
  #                 - arn:aws:s3:::team-device-app-jenkins-s3/*
  #                 - arn:aws:s3:::team-device-app-jenkins-s3-us-west-2/*
  #       - PolicyName: CodeDeployAccess
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Sid: allowcodedeploystop
  #               Effect: Allow
  #               Action:
  #                 - codedeploy:ListDeployments
  #                 - codedeploy:StopDeployment
  #                 - codedeploy:GetDeployment
  #                 - codedeploy:ListDeploymentInstances
  #               Resource:
  #                 - !Sub arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:* #${ApplicationName}/${DeploymentGroupName}
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-role-${pEnvironment}-app3-${AWS::Region}
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: IAM Role for app3 EC2 Instance
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  # rapp3InstanceProfile:
  #   #Condition: cIsProd
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Roles:
  #       - !Ref rapp3InstanceRole

  # ### Security Group Resources
  # rapp3SecurityGroup:
  #   #Condition: cIsProd
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: !Sub ${pProduct}-app3-secgroup-${pEnvironment}
  #     VpcId: !Ref pVPCId
  #     GroupDescription: Enable Inbound Intranet Subnet and App ASG Connectivity From to app3 Instance
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/23
  #         FromPort: 40001
  #         ToPort: 40001
  #         Description: Allow ingress for app3 to connect to eps
  #       # - IpProtocol: tcp
  #       #   FromPort: 40001 #443
  #       #   ToPort: 40001 #443
  #       #   CidrIp: !Ref pIntraSubnetCIDR1
  #       #   Description: inbound from Intra Subnet 1
  #       # - IpProtocol: tcp
  #       #   FromPort: 40001 #443
  #       #   ToPort: 40001 #443
  #       #   CidrIp: !Ref pIntraSubnetCIDR2
  #       #   Description: inbound from Intra Subnet 2
  #       # - IpProtocol: tcp
  #       #   FromPort: 40001 #443
  #       #   ToPort: 40001 #443
  #       #   CidrIp: !Ref pIntraSubnetCIDR3
  #       #   Description: inbound from Intra Subnet 3
  #       # - IpProtocol: tcp
  #       #   FromPort: 1000 #443
  #       #   ToPort: 1000 #443
  #       #   CidrIp: !Ref pIntraSubnetCIDR1
  #       #   Description: inbound from Intra Subnet 1
  #       # - IpProtocol: tcp
  #       #   FromPort: 1000 #443
  #       #   ToPort: 1000 #443
  #       #   CidrIp: !Ref pIntraSubnetCIDR2
  #       #   Description: inbound from Intra Subnet 2
  #       # - IpProtocol: tcp
  #       #   FromPort: 1000 #443
  #       #   ToPort: 1000 #443
  #       #   CidrIp: !Ref pIntraSubnetCIDR3
  #       #   Description: inbound from Intra Subnet 3
  #     SecurityGroupEgress:
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/23
  #         FromPort: 40001
  #         ToPort: 40001
  #         Description: Allow Egress for app3 to connect to eps
  #       # Allow SMTP Server access
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/32
  #         FromPort: 25
  #         ToPort: 25
  #         Description: Allow Egress to SMTP Server
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/32
  #         FromPort: 25
  #         ToPort: 25
  #         Description: Allow Egress to SMTP Server
  #     # Proxy
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/26
  #         FromPort: 8080
  #         ToPort: 8080
  #         Description: Allow Egress to team Proxy US East 1
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/25
  #         FromPort: 8080
  #         ToPort: 8080
  #         Description: Allow Egress to team Proxy US East 1
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/26
  #         FromPort: 8080
  #         ToPort: 8080
  #         Description: Allow Egress to team Proxy US West 2
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/26
  #         FromPort: 8080
  #         ToPort: 8080
  #         Description: Allow Egress to team Proxy US West 2
  #       - IpProtocol: tcp
  #         FromPort: 80 #443
  #         ToPort: 80 #443
  #         CidrIp: 127.0.0.1/32
  #         Description: Default local host all traffic
  #       ## New Relic Proxies
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/32
  #         FromPort: 80
  #         ToPort: 80
  #         Description: Allow Outbound to New Relic Proxy
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/32
  #         FromPort: 80
  #         ToPort: 80
  #         Description: Allow Outbound to New Relic Proxy
  #       - IpProtocol: tcp
  #         CidrIp: 0.0.0.0/32
  #         FromPort: 80
  #         ToPort: 80
  #         Description: Allow Outbound to New Relic Proxy
  #       ##RabbitMQ
  #       - IpProtocol: tcp
  #         FromPort: 443
  #         ToPort: 443
  #         DestinationSecurityGroupId: !Ref rRabbitMQClusterSecurityGroup
  #         Description: Egress to Amazon MQ for Rabbit MQ
  #       - IpProtocol: tcp
  #         FromPort: 5671
  #         ToPort: 5671
  #         DestinationSecurityGroupId: !Ref rRabbitMQClusterSecurityGroup
  #         Description: Egress to Amazon MQ for Rabbit MQ  
  #       # - IpProtocol: tcp
  #       #   FromPort: 5671
  #       #   ToPort: 5671
  #       #   CidrIp: !Ref pMQcidr1
  #       #   Description: Egress to IntraSubnet1 for Rabbit MQ Custom DNS
  #       # - IpProtocol: tcp
  #       #   FromPort: 5432
  #       #   ToPort: 5432
  #       #   CidrIp: !Select [0, !Ref pDbCidr]
  #       #   Description: Egress to Aurora Global DB Subnet 1
  #       # - IpProtocol: tcp
  #       #   FromPort: 5432
  #       #   ToPort: 5432
  #       #   CidrIp: !Select [1, !Ref pDbCidr]
  #       #   Description: Egress to Aurora Global DB Subnet 2
  #       # - IpProtocol: tcp
  #       #   FromPort: 5432
  #       #   ToPort: 5432
  #       #   CidrIp: !Select [2, !Ref pDbCidr]
  #       #   Description: Egress to Aurora Global DB Subnet 3
        
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-secgroup-app3-${pEnvironment}-instances
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: Security Group to allow access to Application Instances by Console ALB
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  # rapp3SecurityGroupEgressAppSub1:
  #   #Condition: cIsProd
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties: 
  #     GroupId: !Ref rApplicationSecurityGroup
  #     Description: Egress Rule to app3 SG
  #     IpProtocol: tcp
  #     CidrIp: !Ref pAppSubnetCIDR1
  #     FromPort: 443
  #     ToPort: 443
  
  # rapp3SecurityGroupEgressAppSub2:
  #   #Condition: cIsProd
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties: 
  #     GroupId: !Ref rApplicationSecurityGroup
  #     Description: Egress Rule to app3 SG
  #     IpProtocol: tcp
  #     CidrIp: !Ref pAppSubnetCIDR2
  #     FromPort: 443
  #     ToPort: 443
  
  # rapp3SecurityGroupEgressAppSub3:
  #   #Condition: cIsProd
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties: 
  #     GroupId: !Ref rApplicationSecurityGroup
  #     Description: Egress Rule to app3 SG
  #     IpProtocol: tcp
  #     CidrIp: !Ref pAppSubnetCIDR3
  #     FromPort: 443
  #     ToPort: 443

  ###app3 Network Load Balancer
  # rapp3NetworkLoadBalancer:
  #   #Condition: cIsProd
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     IpAddressType: ipv4
  #     Name: !Sub ${pProduct}-app3-${pEnvironment}-console
  #     Scheme: internal
  #     Subnets: !Ref pIntraSubnets
  #     Type: network
  #     LoadBalancerAttributes:
  #       - Key: access_logs.s3.enabled
  #         Value: true
  #       - Key: access_logs.s3.bucket
  #         Value: !Ref pALBAccessLogBucketParam
  #       - Key: access_logs.s3.prefix
  #         Value: app3-app-nlb
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-app3-${pEnvironment}-console
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsadß
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: ALB Access to Console Service on Application Instances
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner
  #       - Key: team:waf-exclude
  #         Value: !Sub public-block-mode-${pEnvironment}
  #       - Key: team:waf-exclude
  #         Value: !Sub public-block-mode-${pEnvironment}

  # rapp3Listener:
  #   #Condition: cIsProd
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref rapp3TargetGroupConsole
  #     LoadBalancerArn: !Ref rapp3NetworkLoadBalancer
  #     Port: 40001
  #     Protocol: TCP
  #     # SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08
  #     # Certificates:
  #     #   - CertificateArn: !Ref pConsoleCertArn

  ### app3 ASG/Target Group/Template Resources
  # rapp3TargetGroupConsole:
  #   #Condition: cIsProd
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Sub ${pProduct}-app3-tg-${pEnvironment}-1
  #     Port: 40001
  #     Protocol: "TCP"
  #     VpcId: !Ref pVPCId
  #     HealthCheckEnabled: true
  #     HealthyThresholdCount: 5
  #     UnhealthyThresholdCount: 2
  #     HealthCheckProtocol: "HTTPS"
  #     HealthCheckPort: 1000
  #     HealthCheckPath: "/app/isAlive.jsp"
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-app3-tg-${pEnvironment}
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: Target Group for Application Instances
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  # rapp3InstanceASG:
  #   #Condition: cIsProd
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   CreationPolicy:
  #     ResourceSignal:
  #       Count: 
  #         !If
  #           - cIsMainRegion
  #           - !Ref pDevInstanceCount
  #           - !If
  #               - cIsR2andActive
  #               - !Ref pDevInstanceCount
  #               - 0 # First deployment to R2 behavior (starting on or off)
  #       Timeout: PT25M
  #   UpdatePolicy:
  #     AutoScalingRollingUpdate:
  #       !If
  #         - cIsMainRegion
  #         - 
  #           PauseTime: PT25M # Region 1 constant behavior
  #           WaitOnResourceSignals: true
  #         - !If
  #             - cIsR2andActive
  #             - 
  #               PauseTime: PT25M # Region 2 activated/updated behavior
  #               WaitOnResourceSignals: true
  #             - 
  #               !Ref AWS::NoValue # Tear down R2 behavior
  #   Properties:
  #     AutoScalingGroupName: !Sub ${pProduct}-app3-asg-${pEnvironment}
  #     MinSize:
  #       !If
  #         - cIsR2ActiveOrIsMain
  #         - !Ref pDevInstanceCount
  #         - '0'
  #     MaxSize: 
  #       !If 
  #         - cIsR2ActiveOrIsMain
  #         - !Ref pDevInstanceCount
  #         - '0'
  #     DesiredCapacity: 
  #       !If 
  #         - cIsR2ActiveOrIsMain
  #         - !Ref pDevInstanceCount
  #         - '0'
  #     TargetGroupARNs:
  #       - !Ref rapp3TargetGroupConsole
  #     HealthCheckGracePeriod: 300
  #     NewInstancesProtectedFromScaleIn: false
  #     LaunchTemplate:
  #       LaunchTemplateId: !Ref rapp3LaunchTemplate
  #       Version: !GetAtt rapp3LaunchTemplate.LatestVersionNumber
  #     VPCZoneIdentifier: !Ref pAppSubnets
  #     MetricsCollection:
  #       - Granularity: "1Minute"
  #         Metrics:
  #           - "GroupMinSize"
  #           - "GroupMaxSize"
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-app3-asg-${pEnvironment}
  #         PropagateAtLaunch: false
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #         PropagateAtLaunch: true
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #         PropagateAtLaunch: true
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner
  #         PropagateAtLaunch: true
  #       - Key: team:customer-data
  #         Value: !Ref pTagteamCustomerData
  #         PropagateAtLaunch: true
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #         PropagateAtLaunch: true
  #       - Key: team:ec2:os
  #         Value: amazon.linux.2
  #         PropagateAtLaunch: true
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #         PropagateAtLaunch: true
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #         PropagateAtLaunch: true
  #       - Key: team:purpose
  #         Value: AutoScaling Group for app3 Instance
  #         PropagateAtLaunch: false
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #         PropagateAtLaunch: true
  #       - Key: team:role
  #         Value: !Ref pTagteamRole
  #         PropagateAtLaunch: true

  # rapp3ASGScalingPolicy:
  #   #Condition: cIsProd
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   Properties: 
  #     AutoScalingGroupName: !Ref rapp3InstanceASG
  #     EstimatedInstanceWarmup: !Ref pInstanceWarmup
  #     # MetricAggregationType: Average
  #     PolicyType: TargetTrackingScaling
  #     TargetTrackingConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ASGAverageCPUUtilization
  #       TargetValue: !Ref pAutoscalingCPUTarget

  # rapp3LaunchTemplate:
  #   #Condition: cIsProd
  #   Type: AWS::EC2::LaunchTemplate
  #   Properties:
  #     LaunchTemplateName: !Sub ${pProduct}-app3-launchtemp-${pEnvironment}
  #     LaunchTemplateData:
  #       BlockDeviceMappings:
  #         - DeviceName: /dev/xvda
  #           Ebs:
  #             DeleteOnTermination: true
  #             Encrypted: true
  #             VolumeSize: 30
  #             VolumeType: gp3
  #       IamInstanceProfile:
  #         Name: !Ref rapp3InstanceProfile
  #       ImageId: !Ref pLatestAMIImage
  #       #InstanceType: c5a.large
  #       InstanceType: !Ref pInstanceType #c5a.large
  #       MetadataOptions:
  #         HttpEndpoint: enabled
  #         HttpPutResponseHopLimit: 2
  #         HttpTokens: required
  #       Monitoring:
  #         Enabled: true
  #       SecurityGroupIds:
  #         - !Ref rapp3SecurityGroup
  #       TagSpecifications:
  #         - ResourceType: instance
  #           Tags:
  #             - Key: Name
  #               Value: !Sub ${pProduct}-app3-${pEnvironment}
  #             - Key: team:launched-by
  #               Value: !Ref pTagteamLaunchedBy
  #             - Key: team:resource-custodian
  #               Value: !Ref pTagteamResourceCustodian
  #             - Key: team:team-owner
  #               Value: !Ref pTagteamTeamOwner
  #             - Key: team:customer-data
  #               Value: !Ref pTagteamCustomerData
  #             - Key: team:dataclass
  #               Value: !Ref pTagteamDataclass
  #             - Key: team:ec2:os
  #               Value: amazon.linux.2
  #             - Key: team:vast-id
  #               Value: !Ref pVastTag
  #             - Key: team:vsad
  #               Value: !Ref pVsadTag
  #             - Key: team:purpose
  #               Value: app3 Instance
  #             - Key: team:lifecycle
  #               Value: !Ref pEnvironment
  #             - Key: team:role
  #               Value: !Ref pTagteamRole
  #       UserData: # app3 ASG User Data.If this script ends up causing issues we should turn on the ASG check ins
  #         Fn::Base64:
  #           !Sub 
  #           - |
  #             #!/bin/bash -xe


  #             notify() {
  #               echo "UserData was unsuccessful!"

  #               deployments=`aws deploy list-deployments --application-name ab-app-app-app3-cdapplication-${pEnvironment} --deployment-group-name ab-app-app-app3-cddeplgroup-${pEnvironment} --include-only-statuses "InProgress" | jq .deployments`
  #               deployments_arr=( $(echo $deployments | sed -e 's/\[//g' -e 's/\]//g' -e 's/\,/ /g' -e 's/\"//g') );

  #               TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
  #               INSTANCE_ID=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id`

  #               for i in "${!deployments_arr[@]}"
  #               do
  #                   instances=`aws deploy list-deployment-instances --deployment-id $i | jq .instancesList`
  #                   instances_arr=( $(echo $instances | sed -e 's/\[//g' -e 's/\]//g' -e 's/\,/ /g' -e 's/\"//g') );
                    
  #                   for y in "${!instances_arr[@]}"
  #                   do
  #                       if [ "$INSTANCE_ID" = "$y" ]; then
  #                           aws deploy stop-deployment --deployment-id $i
  #                           DONE="True"
  #                           break
  #                       fi
  #                   done

  #                   if [ "$DONE" = "True" ]; then
  #                       break
  #                   fi

  #               done

  #               cp /var/log/cloud-init-output.log /home/ec2-user/cloud-init-output-app3-`date +%Y-%m-%d-%H-%M-%S`.log
  #               aws s3 cp /home/ec2-user/cloud-init-output-app3-`date +%Y-%m-%d-%H-%M-%S`.log s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region} --sse aws:kms --sse-kms-key-id alias/ab-app2-app-app-alias-${pEnvironment}-userdata
  #               /opt/aws/bin/cfn-signal -s false \
  #                 --stack ${AWS::StackName} \
  #                 --resource rapp3InstanceASG \
  #                 --region ${AWS::Region}
  #             }
  #             trap 'notify' ERR
              
  #             #1) Time change needs to be added to app and app3
  #             rm -f /etc/localtime
  #             ln -s /usr/share/zoneinfo/America/New_York /etc/localtime

  #             # Set Proxy for YUM
  #             export http_proxy=http://${PROXY_NAME}.team.verizon.com:8080
  #             export https_proxy=http://${PROXY_NAME}.team.verizon.com:8080
  #             export NO_PROXY=169.254.169.254

  #             # Format and Mount Attached Volume
  #             mkfs -t xfs /dev/nvme1n1
  #             mkdir /log
  #             mount /dev/nvme1n1 /log

  #             # Make Volume Re Mount On Reboot
  #             export UUID_LINE=`blkid | grep /dev/nvme1n1`
  #             export UUID=`echo $UUID_LINE | cut -d " " -f2`
  #             UUID=`echo $UUID | sed 's/"//g'`
  #             echo "$UUID  /log  xfs  defaults,nofail  0  2" >> /etc/fstab

  #             # Update Yum and Install Ruby and wget
  #             yum-complete-transaction
  #             sleep 5
  #             yum update -y --exclude amazon-ssm-agent*
  #             sleep 5
  #             yum install -y ruby wget
  #             sleep 5
  #             yum install -y postgresql-libs-9.2.24-1.amzn2.0.1.x86_64 
  #             sleep 5
  #             yum install -y postgresql-9.2.24-1.amzn2.0.1.x86_64
  #             sleep 5
  #             amazon-linux-extras install postgresql10

  #             # NewRelic
  #             cd /etc/yum.repos.d/
  #             aws s3 cp s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/userdata/newrelic-infra.zip /etc/yum.repos.d/newrelic-infra.zip
  #             unzip newrelic-infra.zip
  #             mv newrelic-infra/newrelic-infra.repo .
  #             mv /etc/yum.repos.d/newrelic-infra/newrelic-infra.yml /etc/
  #             rm newrelic-infra.zip
  #             rm -rf newrelic-infra
  #             sleep 5
  #             sudo yum install newrelic-infra -y || true # Or'ed with true to ignore errors
  #             systemctl start newrelic-infra || true # Or'ed with true to ignore errors
              
  #              # Unset Proxy for YUM
  #             unset http_proxy
  #             unset https_proxy

  #             # Download Files From S3
  #             cd /home/ec2-user/
  #             aws s3 cp s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/userdata/app.zip .
  #             aws s3 cp s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/userdata/libssl_files.zip .
  #             aws s3 cp s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/userdata/app_splunk.zip .

  #             # Unzip All Zip Files
  #             unzip app.zip
  #             unzip libssl_files.zip
  #             #unzip siteminder.zip
  #             unzip app_splunk.zip

  #             # Remove Unneeded Zip Files
  #             rm app.zip
  #             rm libssl_files.zip
  #             #rm siteminder.zip

  #             # Create and Move Needed Directories
  #             mkdir -p /apps/opt
  #             #mv siteminder /apps/opt/
  #             mv app /app

  #             # Maybe not required TBD
  #             mkdir -p /app/opt
  #             mkdir -p /app/infra
  #             mkdir -p /log/appserver/app01
  #             mkdir -p /log/appserver/appiot01
  #             #ln -s /apps/opt/siteminder /app/opt/siteminder

  #             # Set Java Permanetly On PATH For All Users
  #             chmod +x /app/jdk/jdk1.8.0_161/bin/java
  #             echo 'export JAVA_HOME="/app/jdk/jdk1.8.0_161"' >> /etc/profile.d/java_home.sh
  #             echo 'export LS_JAVA_HOME="/app/jdk/jdk1.8.0_161"' >> /etc/profile.d/java_home.sh
  #             echo 'export PATH=$JAVA_HOME/bin:$PATH' >> /etc/profile.d/java_home.sh
  #             source /etc/profile
  
  #             # Run hosts.sh and Setup Hostname File(s)
  #             chmod +x /app/hosts.sh
  #             vim "+set ff=unix" "+wq" /app/hosts.sh
  #             /app/./hosts.sh
              
  #             # Registration Commands
  #             #cd /apps/opt/siteminder/webagent
  #             #. ./ca_wa_env.sh
  #             #cd /apps/opt/siteminder/webagent/bin
  #             #./smreghost -i onesso-uatb01.ebiz.verizon.com -hn MYVZSERVICETEST-UAT-1-appreg-key -sh "uvt30B3OcempHeev7aMWVBJQ2r3QDd3rXfXJK99iiknHWyySM6UEE2QbOvgOSDcRfJW5upxN5i7i5NMTUAtSBAgekNvbsx6vLP1f7qvi5ZJ9MXQmNgM9n9XRFvr/VobR" -hc app2-diagnostic-HCO -f /apps/opt/siteminder/webagent/config/SmHost.conf
  #             #chmod 777 /apps/opt/siteminder/webagent/config/SmHost.conf
  #             cd /home/ec2-user/

  #             # Create Directories and Move Files
  #             mv libssl_files/libssl.so.1.1.1k /usr/lib64
  #             mv libssl_files/libcrypto.so.1.1.1k /usr/lib64
  #             rm -rf libssl_files
  #             mkdir -p /log/webserver/app01
  #             mkdir -p /log/appserver/app-console01 
  #             mkdir -p /log/appserver/app-profile01
  #             mkdir -p /log/appserver/app-upload01
  #             mkdir -p /log/app2DownloadLogs
  #             mkdir -p /app/app/APK
  #             mkdir -p /app/SSKU/APK
  #             mkdir -p /app/FP/APK
  #             mkdir -p /app/BYOD/APK

  #             # Adjust File Permissions As Needed By Agent Scripts
  #             chmod +x /app/webserver/apache/bin/httpd
  #             chmod +x /app/webserver/apache/bin/rotatelogs

  #             # Create Symlinks In /usr/lib64 For httpd
  #             cd /usr/lib64
  #             ln -s libssl.so.1.1.1k libssl.so.1.1
  #             ln -s libcrypto.so.1.1.1k libcrypto.so.1.1
  #             cd /home/ec2-user/

  #             # Install Code Deploy Agent
  #             wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
  #             chmod +x ./install
  #             sudo ./install auto
  #             rm -f install
  #             sed -i "s#:proxy_uri:#:proxy_uri: 'http://${PROXY_NAME}.team.verizon.com:8080'#g" /etc/codedeploy-agent/conf/codedeployagent.yml
  #             sudo service codedeploy-agent restart

  #             # Setup Kafka
  #             chmod +x /app/kafka/app2/kafka_logging/start_kafka_app.sh
  #             chmod +x /app/kafka/app2/kafka_logging/app/logstash-7.16.3/bin/logstash

  #             # Pull Self-Signed Cert Files from Secrets Manager
  #             mkdir -p /app/webserver/ssl
  #             aws secretsmanager get-secret-value --secret-id ${IMPORT_PUB} | jq -r ".SecretString" > /app/webserver/ssl/${CERT_NAME}.team.verizon.com.crt
  #             aws secretsmanager get-secret-value --secret-id ${IMPORT_PRIV} | jq -r ".SecretString" > /app/webserver/ssl/web-${pEnvironment}.key
              
              
  #             #Place the files under 
  #             cp app_splunk/* /etc/otel/collector/fluentd/conf.d/
  #             chown -R td-agent:td-agent /etc/otel/collector/fluentd/conf.d/*
  #             #the owner of the files should be td-agent:td-agent
  #             #add the permissions as 755
  #             chmod 755 /etc/otel/collector/fluentd/conf.d/*
  #             #Then restart the td-agent, command is below  
  #             sudo service td-agent restart

  #             # Create was User to Run the Agents and Application
  #             groupadd was
  #             useradd was -g was -s /sbin/nologin
  #             # Change /app permissions to allow webserver useage of files
  #             cd /app
  #             chown -R was:was *
  #             chmod -R 755 /app
  #             cd /log
  #             chown -R was:was *
  #             chmod -R 755 /log
  #             cd /apps
  #             chown -R root:root *
  #             chmod -R 755 /apps

  #             # Adding app3 agent package dependencies
  #             groupadd cfadmin
  #             groupadd cfuser
  #             useradd cfuser -g cfadmin -s /sbin/nologin
  #             usermod -a -G cfuser cfuser
  #             echo "/apps" > /etc/default/Loc_Env_Anchor
  #             aws s3 cp s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/userdata/VZMFT-LINUX.rpm /home/ec2-user/VZMFT-LINUX.rpm
  #             cd /home/ec2-user
  #             yum localinstall -y VZMFT-LINUX.rpm
  #             rm -f /apps/opt/mftps/config/cfnode.cfg
  #             rm -f /apps/opt/mftps/config/cfrprofile.cfg
  #             aws s3 cp s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/userdata/cfnode.cfg /apps/opt/mftps/config/cfnode.cfg
  #             aws s3 cp s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/userdata/cfrprofile.cfg /apps/opt/mftps/config/cfrprofile.cfg
  #             aws s3 cp s3://ab-app2-app-s3-${pEnvironment}-userdata-${AWS::Region}/userdata/app3epssend.sh /app/app3epssend.sh
  #             chmod 775 /app/app3epssend.sh
  #             chown was:was /app/app3epssend.sh
  #             chown -R cfuser:cfadmin /apps/opt/mftps
  #             chmod -R 755 /apps/opt/mftps

  #             mkdir -p /log/appserver/app01/app3/to-app2/process
  #             mkdir -p /log/appserver/app01/app3/to-app2/not-processed
  #             mkdir -p /log/appserver/app01/app3/to-app2/input
  #             mkdir -p /log/appserver/app01/app3/to-app2/backup
  #             mkdir -p /log/appserver/app01/app3/to-eps/work
  #             mkdir -p /log/appserver/app01/app3/to-eps/output
  #             mkdir -p /log/appserver/app01/app3/to-dvs/work
  #             mkdir -p /log/appserver/app01/app3/to-dvs/output

  #             # splunk changes
  #             chmod -R 777 /log/appserver
  #             chown -R was:was /log/appserver
  #             sudo -u was bash -c 'setfacl -R -d -m u::rwx /log/appserver/*'
  #             sudo -u was bash -c 'setfacl -R -d -m g::rwx /log/appserver/*'
  #             sudo -u was bash -c 'setfacl -R -d -m o::rwx /log/appserver/*'  

  #             # # app3epssend.sh file
              
  #             # echo "#!/bin/bash -xe
  #             # export CFROOT=/apps/opt/mftps
  #             # export PATH=$PATH:/apps/opt/mftps/bin
  #             # FileName='*-EPS-UNLOCKRESP-date+%Y%m%d.CSV'
  #             # /apps/opt/mftps/bin/cfsend lf:/log/appserver/app01/app3/to-eps/output/$FileName rf:/eps_prd/batch/data/receive/$FileName n:EPSBATCH" >> /app/app3epssend.sh
  #             # chmod 775 /app/app3epssend.sh
  #             # chown was:was /app/app3epssend.sh

  #             # update mftps folder permission
  #             chmod -R 777 /apps/opt/mftps/log
              
  #             # Allow cron access on app3, run below command as root
  #             sudo su -
  #             echo "was" > /etc/cron.allow
  #             #exit

  #             #schedule the below cron as "was"
  #             #sudo -u was bash -c '00 07 * * * /app/app3epssend.sh > /log/appserver/app01/app3epssend.log 2>&1'
  #             sudo -u was bash -c '(crontab -l 2>/dev/null; echo "00 07 * * * /app/app3epssend.sh > /log/appserver/app01/app3epssend.log 2>&1") | crontab - '
  #             # Start app3 agent

              
  #             sudo su -
  #             pkill CyberResp
  #             echo "export CFROOT=/apps/opt/mftps
  #             export PATH=$PATH:/apps/opt/mftps/bin
  #             /apps/opt/mftps/bin/cfstart" >> /app/startapp3.sh
  #             chmod 775 /app/startapp3.sh
  #             bash /app/startapp3.sh
  #             sleep 20
  #             #exit

  #             /opt/aws/bin/cfn-signal -s true --stack ${AWS::StackName} --resource rapp3InstanceASG --region ${AWS::Region} || true # Or'ed with true to ignore errors

  #           - IMPORT_PUB:
  #               !ImportValue iSSPubArn
  #             IMPORT_PRIV:
  #               !ImportValue iSSPrivArn
  #             PROXY_NAME:
  #               !If
  #                 - cIsProd
  #                 - proxy
  #                 - proxy-nonprod
  #             CERT_NAME:
  #               !If
  #                 - cIsProd
  #                 - app2
  #                 - !Sub app2-${pEnvironment}

  ### app3 Deployment Resources
  # rapp3DeployApp:
  #   #Condition: cIsProd
  #   Type: AWS::CodeDeploy::Application
  #   Properties:
  #     ApplicationName: !Sub ${pProduct}-app3-cdapplication-${pEnvironment}
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-app3-cdapplication-${pEnvironment}
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: CodeDeploy Application for app3 Application Instances
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  # rapp3DeploymentGroup:
  #   #Condition: cIsR2ActiveOrIsMain
  #   #Condition: cIsProd
  #   Type: AWS::CodeDeploy::DeploymentGroup
  #   Properties:
  #     ApplicationName: !Ref rapp3DeployApp
  #     DeploymentGroupName: !Sub ${pProduct}-app3-cddeplgroup-${pEnvironment}
  #     DeploymentConfigName: CodeDeployDefault.OneAtATime
  #     AutoScalingGroups:
  #       - !Ref rapp3InstanceASG
  #     DeploymentStyle:
  #       DeploymentOption: WITH_TRAFFIC_CONTROL
  #       DeploymentType: IN_PLACE
  #     LoadBalancerInfo:
  #       TargetGroupInfoList:
  #         - Name: !GetAtt rapp3TargetGroupConsole.TargetGroupName
  #     AutoRollbackConfiguration:
  #       Enabled: true
  #       Events:
  #         - DEPLOYMENT_FAILURE
  #         - DEPLOYMENT_STOP_ON_ALARM
  #         - DEPLOYMENT_STOP_ON_REQUEST
  #     ServiceRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/CodePipeline-Action

  ### AmazonMQ Resources
  rRabbitPasswordKMSKeyAlias:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${pProduct}-rabbit-pwd-key
      TargetKeyId: !Ref rRabbitPasswordKMSKey

  rRabbitPasswordKMSKey:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for Rabbit Password Secret
      Enabled: !!bool 'true'
      EnableKeyRotation: !!bool 'true'
      KeyPolicy:
        Version: '2012-10-17'
        Id: team-key-default
        Statement:
          - Sid: Enable IAM and allow interactive (human) role(s) key use permissions
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            - kms:*
            Resource: '*'
            Condition:
              ArnLike:
                aws:PrincipalArn:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: Enable IAM and allow service (non-human) role(s) key use permissions
            Effect: Allow
            Principal:
              AWS: !GetAtt rRabbitConfigureRole.Arn
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            Resource: '*'
            Condition:
              'Null':
                kms:ViaService: !!bool 'false'
              ArnLike:
                aws:PrincipalArn:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: Allow service (non-human) role(s) grant operations on CMK
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/cloudformationservicerole
            Action:
            - kms:CreateGrant
            - kms:ListGrants
            - kms:RetireGrant
            - kms:RevokeGrant
            - kms:*
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: !!bool 'true'
              StringEquals:
                aws:PrincipalAccount: !Ref AWS::AccountId
            # - Sid: Key administration permissions
            #   Effect: Allow
            #   Principal:
            #     AWS:
            #     - Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            #   Action:
            #   - kms:*
            #   Resource: '*'
      PendingWindowInDays: !!int '30'
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-kms-${pEnvironment}-rabbitpwd
        - Key: team:lifecycle
          Value: !Ref pEnvironment
        - Key: team:vsad
          Value: !Ref pVsadTag
        - Key: team:vast
          Value: !Ref pVastTag
        - Key: team:purpose
          Value: KMS Key for RabbitMQ Password
        - Key: team:dataclass
          Value: !Ref pTagteamDataclass
        - Key: team:launched-by
          Value: !Ref pTagteamLaunchedBy
        - Key: team:resource-custodian
          Value: !Ref pTagteamResourceCustodian
        - Key: team:team-owner
          Value: !Ref pTagteamTeamOwner

  rRabbitPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${pProduct}-secret-${pEnvironment}-rabbitpwd
      Description: The password for the rabbit-admin user in RabbitMQ
      KmsKeyId: !Ref rRabbitPasswordKMSKey
      GenerateSecretString:
        PasswordLength: 15
        ExcludeCharacters: ',:='
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-secret-${pEnvironment}-rabbitpwd
        - Key: team:lifecycle
          Value: !Ref pEnvironment
        - Key: team:vsad
          Value: !Ref pVsadTag
        - Key: team:vast
          Value: !Ref pVastTag
        - Key: team:purpose
          Value: Secret for RabbitMQ password
        - Key: team:dataclass
          Value: !Ref pTagteamDataclass
        - Key: team:launched-by
          Value: !Ref pTagteamLaunchedBy
        - Key: team:resource-custodian
          Value: !Ref pTagteamResourceCustodian
        - Key: team:team-owner
          Value: !Ref pTagteamTeamOwner

  # riotOracledbPasswordSecret:
  #   Type: AWS::SecretsManager::Secret
  #   Properties:
  #     Name: !Sub ${pProduct}-secret-${pEnvironment}-iotOracledbPassword
  #     Description: The password for the oracle db user for iot
  #     KmsKeyId: !Ref riotOracledbPasswordKMSKey
  #     GenerateSecretString:
  #       PasswordLength: 15
  #       ExcludeCharacters: ',:='
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-secret-${pEnvironment}-iotOracledbPassword
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: Secret for iotOracledb password
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  rRabbitUserPasswordKMSKeyAlias:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${pProduct}-rabbit-user-pwd-key
      TargetKeyId: !Ref rRabbitUserPasswordKMSKey

  # riotOracledbPasswordKMSKeyAlias:
  #   DeletionPolicy: Retain
  #   UpdateReplacePolicy: Retain
  #   Type: AWS::KMS::Alias
  #   Properties:
  #     AliasName: !Sub alias/${pProduct}-iotOracledb-pwd-key
  #     TargetKeyId: !Ref riotOracledbPasswordKMSKey

  rRabbitUserPasswordKMSKey:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for Rabbit User Password Secret
      Enabled: !!bool 'true'
      EnableKeyRotation: !!bool 'true'
      KeyPolicy:
        Version: '2012-10-17'
        Id: team-key-default
        Statement:
          - Sid: Enable IAM and allow interactive (human) role(s) key use permissions
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            - kms:*
            Resource: '*'
            Condition:
              ArnLike:
                aws:PrincipalArn:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: Enable IAM and allow service (non-human) role(s) key use permissions
            Effect: Allow
            Principal:
              AWS: !GetAtt rRabbitConfigureRole.Arn
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            Resource: '*'
            Condition:
              'Null':
                kms:ViaService: !!bool 'false'
              ArnLike:
                aws:PrincipalArn:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: Allow service (non-human) role(s) grant operations on CMK
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/cloudformationservicerole
            Action:
            - kms:CreateGrant
            - kms:ListGrants
            - kms:RetireGrant
            - kms:RevokeGrant
            - kms:*
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: !!bool 'true'
              StringEquals:
                aws:PrincipalAccount: !Ref AWS::AccountId
          # - Sid: Key administration permissions
          #   Effect: Allow
          #   Principal:
          #     AWS:
          #     - Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
          #   Action:
          #   - kms:*
          #   Resource: '*'
      PendingWindowInDays: !!int '30'
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-kms-${pEnvironment}-rabbituserpwd
        - Key: team:lifecycle
          Value: !Ref pEnvironment
        - Key: team:vsad
          Value: !Ref pVsadTag
        - Key: team:vast
          Value: !Ref pVastTag
        - Key: team:purpose
          Value: KMS Key for RabbitMQ User Password
        - Key: team:dataclass
          Value: !Ref pTagteamDataclass
        - Key: team:launched-by
          Value: !Ref pTagteamLaunchedBy
        - Key: team:resource-custodian
          Value: !Ref pTagteamResourceCustodian
        - Key: team:team-owner
          Value: !Ref pTagteamTeamOwner

  # riotOracledbPasswordKMSKey:
  #   DeletionPolicy: Retain
  #   UpdateReplacePolicy: Retain
  #   Type: AWS::KMS::Key
  #   Properties:
  #     Description: KMS Key for iot Oralce DB Password Secret
  #     Enabled: !!bool 'true'
  #     EnableKeyRotation: !!bool 'true'
  #     KeyPolicy:
  #       Version: '2012-10-17'
  #       Id: team-key-default
  #       Statement:
  #         - Sid: Enable IAM and allow interactive (human) role(s) key use permissions
  #           Effect: Allow
  #           Principal:
  #             AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
  #           Action:
  #           - kms:Encrypt
  #           - kms:Decrypt
  #           - kms:ReEncrypt*
  #           - kms:GenerateDataKey*
  #           - kms:DescribeKey
  #           Resource: '*'
  #         #   Condition:
  #         #     ArnLike:
  #         #       aws:PrincipalArn:
  #         #         - !Sub arn:aws:iam::${AWS::AccountId}:role/team*sso*
  #         - Sid: Enable IAM and allow service (non-human) role(s) key use permissions
  #           Effect: Allow
  #           Principal:
  #             AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
  #           Action:
  #           - kms:Encrypt
  #           - kms:Decrypt
  #           - kms:ReEncrypt*
  #           - kms:GenerateDataKey*
  #           - kms:DescribeKey
  #           Resource: '*'
  #           Condition:
  #             'Null':
  #               kms:ViaService: !!bool 'false'
  #             ArnLike:
  #               aws:PrincipalArn:
  #                 - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/*
  #         - Sid: Allow service (non-human) role(s) grant operations on CMK
  #           Effect: Allow
  #           Principal:
  #             AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/CodePipeline-Action
  #           Action:
  #           - kms:CreateGrant
  #           - kms:ListGrants
  #           - kms:RetireGrant
  #           - kms:RevokeGrant
  #           Resource: '*'
  #           Condition:
  #             Bool:
  #               kms:GrantIsForAWSResource: !!bool 'true'
  #             StringEquals:
  #               aws:PrincipalAccount: !Ref AWS::AccountId
  #         - Sid: Key administration permissions
  #           Effect: Allow
  #           Principal:
  #             AWS:
  #             - Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
  #           Action:
  #           - kms:*
  #           Resource: '*'
  #     PendingWindowInDays: !!int '30'
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-kms-${pEnvironment}-iotOracledbPassword
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: KMS Key for iotOracledb Password
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  rRabbituserPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${pProduct}-secret-${pEnvironment}-rabbituserpwd
      Description: The password for the app-app user in RabbitMQ
      KmsKeyId: !Ref rRabbitUserPasswordKMSKey
      GenerateSecretString:
        PasswordLength: 15
        ExcludeCharacters: ',:='
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-secret-${pEnvironment}-rabbituserpwd
        - Key: team:lifecycle
          Value: !Ref pEnvironment
        - Key: team:vsad
          Value: !Ref pVsadTag
        - Key: team:vast
          Value: !Ref pVastTag
        - Key: team:purpose
          Value: Secret for RabbitMQ password
        - Key: team:dataclass
          Value: !Ref pTagteamDataclass
        - Key: team:launched-by
          Value: !Ref pTagteamLaunchedBy
        - Key: team:resource-custodian
          Value: !Ref pTagteamResourceCustodian
        - Key: team:team-owner
          Value: !Ref pTagteamTeamOwner

  rRabbitMQClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${pProduct}-secgroup
      VpcId: !Ref pVPCId
      GroupDescription: Enable RabbitMQ Access within SecGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 127.0.0.1/32
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/16
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !Ref pAppSubnetCIDR1
          FromPort: 5671
          ToPort: 5671
          Description: Allowing inbound from App Subnet1
        - IpProtocol: tcp
          CidrIp: !Ref pAppSubnetCIDR1
          FromPort: 443
          ToPort: 443
          Description: Allowing inbound from App Subnet1
        # - IpProtocol: tcp
        #   CidrIp: !Ref pAppSubnetCIDR2
        #   FromPort: 5671
        #   ToPort: 5671
        #   Description: Allowing inbound from App Subnet2
        # - IpProtocol: tcp
        #   CidrIp: !Ref pAppSubnetCIDR2
        #   FromPort: 443
        #   ToPort: 443
        #   Description: Allowing inbound from App Subnet2
        # - IpProtocol: tcp
        #   CidrIp: !Ref pAppSubnetCIDR3
        #   FromPort: 5671
        #   ToPort: 5671
        #   Description: Allowing inbound from App Subnet3
        # - IpProtocol: tcp
        #   CidrIp: !Ref pAppSubnetCIDR3
        #   FromPort: 443
        #   ToPort: 443
        #   Description: Allowing inbound from App Subnet3
        # Allow Traffic from Intra NLB to RabbitMQ 
        # - IpProtocol: tcp
        #   CidrIp: !Ref pIntraSubnetCIDR1
        #   FromPort: 5671
        #   ToPort: 5671
        #   Description: Allowing inbound from Intra Subnet1
        # - IpProtocol: tcp
        #   CidrIp: !Ref pIntraSubnetCIDR1
        #   FromPort: 443
        #   ToPort: 443
        #   Description: Allowing inbound from Intra Subnet1
        # - IpProtocol: tcp
        #   CidrIp: !Ref pIntraSubnetCIDR2
        #   FromPort: 5671
        #   ToPort: 5671
        #   Description: Allowing inbound from Intra Subnet2
        # - IpProtocol: tcp
        #   CidrIp: !Ref pIntraSubnetCIDR2
        #   FromPort: 443
        #   ToPort: 443
        #   Description: Allowing inbound from Intra Subnet2
        # - IpProtocol: tcp
        #   CidrIp: !Ref pIntraSubnetCIDR3
        #   FromPort: 5671
        #   ToPort: 5671
        #   Description: Allowing inbound from Intra Subnet3
        # - IpProtocol: tcp
        #   CidrIp: !Ref pIntraSubnetCIDR3
        #   FromPort: 443
        #   ToPort: 443
        #   Description: Allowing inbound from Intra Subnet3
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-secgroup-${pEnvironment}-rabbitcluster
        - Key: team:lifecycle
          Value: !Ref pEnvironment
        - Key: team:vsad
          Value: !Ref pVsadTag
        - Key: team:vast
          Value: !Ref pVastTag
        - Key: team:purpose
          Value: Security Group for RabbitMQ cluster
        - Key: team:dataclass
          Value: !Ref pTagteamDataclass
        - Key: team:launched-by
          Value: !Ref pTagteamLaunchedBy
        - Key: team:resource-custodian
          Value: !Ref pTagteamResourceCustodian
        - Key: team:team-owner
          Value: !Ref pTagteamTeamOwner
  
  # rRabbitMQInternalIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref rRabbitMQClusterSecurityGroup
  #     IpProtocol: TCP
  #     SourceSecurityGroupId: !Ref rApplicationSecurityGroup
  #     FromPort: 80 #443
  #     ToPort: 80 #443 
  
  rRabbitMQInternalEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref rRabbitMQClusterSecurityGroup
      IpProtocol: '-1'
      DestinationSecurityGroupId: !Ref rRabbitMQClusterSecurityGroup

  rRabbitBroker:
    Condition: cIsR2ActiveOrIsMain
    Type: AWS::AmazonMQ::Broker
    Properties:
      AutoMinorVersionUpgrade: false # @Product Team
      BrokerName: !Sub ${pProduct}-mqbroker-${pEnvironment}-rabbitmq-1
      DeploymentMode: SINGLE_INSTANCE
                          #!If 
      #                   - cIsProd
      #                   - CLUSTER_MULTI_AZ
      #                   - !If
      #                     - cIsPreProd
      #                     - CLUSTER_MULTI_AZ
                          
      EngineType: RABBITMQ
      EngineVersion: 3.9.13
      
      HostInstanceType: mq.m5.large
      Logs:
        General: true
      MaintenanceWindowStartTime: # @Product Team
        DayOfWeek: Monday
        TimeOfDay: "00:00"
        TimeZone: America/Chicago
      PubliclyAccessible: false
      SecurityGroups: [!Ref rRabbitMQClusterSecurityGroup]
      SubnetIds: 
        - !Ref pAppSubnet1
                  #!If
                    #- cIsProd
                    # - [!Ref pAppSubnet1, !Ref pAppSubnet2, !Ref pAppSubnet3]
                    # - !If
                    #   - cIsPreProd
                    #   - [!Ref pAppSubnet1, !Ref pAppSubnet2, !Ref pAppSubnet3]
                    #   - [!Ref pAppSubnet1]
      Users: 
        - 
          Password: !Sub '{{resolve:secretsmanager:${rRabbitPasswordSecret}:SecretString}}'
          Username: !Ref pAdminUsername

      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-mqbroker-${pEnvironment}-rabbitcluster
        - Key: team:lifecycle
          Value: !Ref pEnvironment
        - Key: team:vsad
          Value: !Ref pVsadTag
        - Key: team:vast
          Value: !Ref pVastTag
        - Key: team:purpose
          Value: RabbitMQ broker/cluster
        - Key: team:dataclass
          Value: !Ref pTagteamDataclass
        - Key: team:launched-by
          Value: !Ref pTagteamLaunchedBy
        - Key: team:resource-custodian
          Value: !Ref pTagteamResourceCustodian
        - Key: team:team-owner
          Value: !Ref pTagteamTeamOwner
    
  rRabbitConfigureFunction:
    Condition: cIsMainRegion
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${pProduct}-lambda-${pEnvironment}-configure-rabbit
      CodeUri:
        Bucket: !Ref pLambdaCodeBucket
        Key: my-app/RabbitLambda.zip
        Version: !Ref pObjectVersion
      Environment:
        Variables:
          SECRET_ARN: !Ref rRabbitPasswordSecret
          RABBIT_ENDPOINT: !Sub ${rRabbitBroker}.mq.${AWS::Region}.amazonaws.com
          ENVIRONMENT: dev
      PackageType: Zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref rRabbitMQClusterSecurityGroup
        SubnetIds:
          - !Ref pAppSubnet1
      Handler: app.handler
      Role: !GetAtt rRabbitConfigureRole.Arn
      Runtime: python3.7
      Tags:
        Name: !Sub ${pProduct}-lambda-${pEnvironment}-configure-rabbit
        team:lifecycle : !Ref pEnvironment
        team:vsad : !Ref pVsadTag
        team:vast-id : !Ref pVastTag
        team:purpose: Lambda function to configure RabbitMQ Cluster
        team:dataclass: !Ref pTagteamDataclass
        team:launched-by: !Ref pTagteamLaunchedBy
        team:resource-custodian: !Ref pTagteamResourceCustodian
        team:team-owner: !Ref pTagteamTeamOwner
  
  rRabbitConfigureCustomResource:
    Condition: cIsMainRegion
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rRabbitConfigureFunction.Arn
      Version: 1 # Increment this when you need the code to be run again

  rRabbitConfigureRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: rabbitmq-configure-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      # PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/team-fed-svcrole-boundary
      Policies:
        - PolicyName: secretsmanager
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                  - secretsmanager:ListSecrets
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${pProduct}-secret-${pEnvironment}-rabbitpwd-* # !Ref rRabbitPasswordSecret # Manually enter role name as to break circular dependency 
        - PolicyName: lambdainvpc
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddress
                  - ec2:UnassignPrivateIpAddress
                Resource: '*'
      # Tags:
      #   - Key: Name
      #     Value: !Sub ${pProduct}-iamrole-${pEnvironment}-rabbit-configure-${AWS::Region}
      #   - Key: team:lifecycle
      #     Value: !Ref pEnvironment
      #   - Key: team:vsad
      #     Value: !Ref pVsadTag
      #   - Key: team:vast
      #     Value: !Ref pVastTag
      #   - Key: team:purpose
      #     Value: IAM Role for RabbitConfigure Lambda Function
      #   - Key: team:dataclass
      #     Value: !Ref pTagteamDataclass
      #   - Key: team:launched-by
      #     Value: !Ref pTagteamLaunchedBy
      #   - Key: team:resource-custodian
      #     Value: !Ref pTagteamResourceCustodian
      #   - Key: team:team-owner
      #     Value: !Ref pTagteamTeamOwner

  # rPublicALBSecurityGroup01:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: !Sub ${pProduct}-secgroup-${pEnvironment}-public-alb-01
  #     VpcId: !Ref pVPCId
  #     GroupDescription: Allow Egress from ALB to application security group. Managed in ab-app-app pipeline.
  #     SecurityGroupIngress:   
  #     - IpProtocol: -1
  #       FromPort: -1
  #       ToPort: -1
  #       CidrIp: 127.0.0.1/32
  #       Description: Default local host all traffic    
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-secgroup-${pEnvironment}-public-alb-01
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: Security Group to allow access to Public ALB by Public Internet
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner
  
  # rPublicALBSecurityGroupEgress01:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties: 
  #     GroupId: !Ref rPublicALBSecurityGroup01
  #     Description: Egress Rule for Public ALB to Application Instances
  #     IpProtocol: tcp
  #     DestinationSecurityGroupId: !Ref rApplicationSecurityGroup
  #     FromPort: 1000
  #     ToPort: 1000

  # rConsoleALBSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: !Sub ${pProduct}-secgroup-${pEnvironment}-console-alb
  #     VpcId: !Ref pVPCId
  #     GroupDescription: Enable Public ALB Access From Console Intranet
  #     SecurityGroupIngress:   
  #     - IpProtocol: -1
  #       FromPort: -1
  #       ToPort: -1
  #       CidrIp: 127.0.0.1/32
  #       Description: Default local host all traffic    
  #     - IpProtocol: tcp
  #       FromPort: 443
  #       ToPort: 443
  #       CidrIp: 0.0.0.0/23
  #       Description: Inbound traffic from onprem dvs
  #     - IpProtocol: tcp
  #       FromPort: 443
  #       ToPort: 443
  #       CidrIp: 0.0.0.0/19
  #       Description: DVS AWS connectivity  
  #     - IpProtocol: tcp
  #       FromPort: 443
  #       ToPort: 443
  #       CidrIp: 0.0.0.0/19
  #       Description: DVS AWS connectivity  
  #     - IpProtocol: tcp
  #       FromPort: 443
  #       ToPort: 443
  #       CidrIp: 0.0.0.0/21
  #       Description: DVS AWS connectivity
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-secgroup-${pEnvironment}-console-alb
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: Security Group to allow access to Console ALB by Console Internet
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

  # rConsoleALBSecurityGroupEgress:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties: 
  #     GroupId: !Ref rConsoleALBSecurityGroup
  #     Description: Egress Rule for Console ALB to Application Instances
  #     IpProtocol: tcp
  #     DestinationSecurityGroupId: !Ref rApplicationSecurityGroup
  #     FromPort: 443
  #     ToPort: 443

  # rConsoleALBSecurityGroupEgressHC:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties: 
  #     GroupId: !Ref rConsoleALBSecurityGroup
  #     Description: Egress Rule for Console ALB Health Check to Application Instances
  #     IpProtocol: tcp
  #     DestinationSecurityGroupId: !Ref rApplicationSecurityGroup
  #     FromPort: 1000
  #     ToPort: 1000

  # ### Note on Below CIDR Ranges and Sec Group Rules
  # ### Any rfc1918 adress (192.168.0.0/16, 10.0.0.0/8, 172.16.0.0/12) 
  # ### must resolve to 159.67.70.0/23 address to access resoruce thru IT\GTS
  # ### This is why there are a lot of commented out rules - to preserve true IP destinations



###Temp Network Load Balancer for Application cutover to allow onprem app incoming traffic
  # rDBNetworkLoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     IpAddressType: ipv4
  #     Name: !Sub ${pProduct}-db-${pEnvironment}-console
  #     Scheme: internal
  #     Subnets: !Ref pIntraSubnets
  #     Type: network
  #     LoadBalancerAttributes:
  #       - Key: access_logs.s3.enabled
  #         Value: true
  #       - Key: access_logs.s3.bucket
  #         Value: !Ref pALBAccessLogBucketParam
  #       - Key: access_logs.s3.prefix
  #         Value: db-app-nlb
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-app3-${pEnvironment}-console
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsadß
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: ALB Access to Console Service on Application Instances
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner
  #       - Key: team:waf-exclude
  #         Value: !Sub public-block-mode-${pEnvironment}
  #       - Key: team:waf-exclude
  #         Value: !Sub public-block-mode-${pEnvironment}

  # rDBListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref rDBTargetGroupConsole
  #     LoadBalancerArn: !Ref rDBNetworkLoadBalancer
  #     Port: 5432
  #     Protocol: TCP

  # ### app3 ASG/Target Group/Template Resources
  # rDBTargetGroupConsole:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Sub ${pProduct}-db-tg-${pEnvironment}-2
  #     Port: 5432
  #     Protocol: "TCP"
  #     VpcId: !Ref pVPCId
  #     HealthCheckEnabled: true
  #     HealthyThresholdCount: 5
  #     UnhealthyThresholdCount: 2
  #     #HealthCheckProtocol: "HTTPS"
  #     HealthCheckPort: traffic-port
  #     #HealthCheckPath: /
  #     Targets:
  #       - Id: !Ref pPostgreSQLIP # 172.24.14.97
  #     TargetType: ip
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${pProduct}-db-tg-${pEnvironment}
  #       - Key: team:lifecycle
  #         Value: !Ref pEnvironment
  #       - Key: team:vsad
  #         Value: !Ref pVsadTag
  #       - Key: team:vast-id
  #         Value: !Ref pVastTag
  #       - Key: team:purpose
  #         Value: Target Group for Application Instances
  #       - Key: team:dataclass
  #         Value: !Ref pTagteamDataclass
  #       - Key: team:launched-by
  #         Value: !Ref pTagteamLaunchedBy
  #       - Key: team:resource-custodian
  #         Value: !Ref pTagteamResourceCustodian
  #       - Key: team:team-owner
  #         Value: !Ref pTagteamTeamOwner

# Outputs:
#   oApplicationTargetGroupPublic:
#     Description: Target Group for Public ALB
#     Value: !Ref rApplicationTargetGroupPublic 
#     Export:
#       Name: !Sub "${AWS::StackName}-appAppPublicTG" 
#   oApplicationTargetGroupPubliciot:
#     Description: Target Group for Public ALB
#     Value: !Ref rApplicationTargetGroupPubliciot
#     Export:
#       Name: !Sub "${AWS::StackName}-appAppPublicTGiot" 
#   oApplicationTargetGroupConsole:
#     Description: Target group for Console ALB
#     Value: !Ref rApplicationTargetGroupConsole
#     Export:
#       Name: !Sub "${AWS::StackName}-appAppConsoleTG"
#   oApplicationTargetGroupConsoleiot:
#     Description: Target group for Console ALB
#     Value: !Ref rApplicationTargetGroupConsoleiot
#     Export:
#       Name: !Sub "${AWS::StackName}-appAppConsoleTGiot"
#   oPublicALBSecurityGroup01:
#     Description: Public ALB Security Group
#     Value: 
#       !GetAtt
#         - rPublicALBSecurityGroup01
#         - GroupId
#     Export:
#       Name: !Sub "${AWS::StackName}-appPublicALBSG-01"
#   oConsoleALBSecurityGroup:
#     Description: Console ALB Security Group
#     Value: 
#       !GetAtt
#         - rConsoleALBSecurityGroup  
#         - GroupId
#     Export:
#       Name: !Sub "${AWS::StackName}-appConsoleALBSG"
#   oapp3NetworkLoadBalancer:
#     Description: Console NLB
#     Value:
#       !GetAtt
#         - rapp3NetworkLoadBalancer
#         - DNSName
#     Export:
#       Name: !Sub "${AWS::StackName}-app3NetworkLoadBalancer"
#   oapp3NetworkLoadBalancerId:
#     Description: Console NLB Hosted zone ID
#     Value:
#       !GetAtt
#         - rapp3NetworkLoadBalancer
#         - CanonicalHostedZoneID
#     Export:
#       Name: !Sub "${AWS::StackName}-app3NetworkLoadBalancerID"
  
#   oDBNetworkLoadBalancer:
#     Description: Console NLB for DB
#     Value:
#       !GetAtt
#         - rDBNetworkLoadBalancer
#         - DNSName
#     Export:
#       Name: !Sub "${AWS::StackName}-DBNetworkLoadBalancer"
#   oDBNetworkLoadBalancerId:
#     Description: Console NLB for DB Hosted zone ID
#     Value:
#       !GetAtt
#         - rDBNetworkLoadBalancer
#         - CanonicalHostedZoneID
#     Export:
#       Name: !Sub "${AWS::StackName}-DBNetworkLoadBalancerID"
#   oTempOutput:
#     Description: Test
#     Value: 123
#     Export:
#       Name: Tester-Test