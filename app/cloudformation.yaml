AWSTemplateFormatVersion: 2010-09-09
Description: Sample Template for team Simple-CloudFormation for app
Transform: 'AWS::Serverless-2016-10-31' # Remove if not using a serverless function

Parameters:
  ## team TAGS
  pProduct:
    Description: Name of the instance
    Type: String
    Default: 'is'
  pEnvironment:
    Description: Environment Name
    Type: String
    Default: 'dev'
  pTagteamRole:
    Type: String
    AllowedValues:
      - app
      - web
      - db
    Default: 'app'
  pTagteamDataclass:
    Type: String
    AllowedValues:
      - public
      - private
      - conf
      - high-conf
    Default: high-conf
  pTagteamCustomerData:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  pTagteamTeamOwner:
    Type: String
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    Default: first.last@mail.com # REPLACE ME
  pTagteamLaunchedBy:
    Type: String
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    Default: first.last@mail.com # REPLACE ME
  pTagteamResourceCustodian:
    Type: String
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    Default: first.last@mail.com # REPLACE ME
  pVsadTag:
    #Type: 'AWS::SSM::Parameter::Value<String>'
    Type: String
    Description: VZ VSAD ID
    #Default: '/accounts/vsad/id'
    Default: 'Dummyvastid'
  pVastTag:
    #Type: 'AWS::SSM::Parameter::Value<String>'
    Type: String
    Description: VZ VAST ID
    #Default: '/accounts/vast/id'
    Default: 'Dummyvastid'
  # pALBAccessLogBucketParam:
  #   Type: 'AWS::SSM::Parameter::Value<String>'
  #   Description: ALB Access Log Bucket
  #   Default: '/accounts/logging/aws-load-balancer-log-bucket'
  # pLatestAMIImage:
  #   #Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  #    Type: String
  #   Description: SSM parameter for latest AMI ID
  #   Default: 'ami-abcdef'

  ## Pipeline Parameters
  pMainRegion:
    Type: String
    Description: Main Region for Infrastructure
    Default: us-east-1
  pRegion2Active:
    Type: String
    Description: Parameter to activate R2 or not
    Default: No

  ## App Specific Parameters
  pVPCId:
    Description: VPC ID
    Type: String
    Default: 'vpc-123'
  pAppSubnets:
    Description: An Array of the App Subnet IDs
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-1
  pAppSubnetCIDR1:
    Description: An Array of the Intranet Subnet IDs
    Type: String
    Default: '10.0.0.0/24'
  # pAppSubnetCIDR2:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: String
  # pAppSubnetCIDR3:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: String
  # pIntraSubnets:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: List<AWS::EC2::Subnet::Id>
  # pIntraSubnetCIDR1:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: String
  # pIntraSubnetCIDR2:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: String
  # pIntraSubnetCIDR3:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: String
  # pInstanceCount:
  #   Type: String
  #   Description: Instance Count for EC2 ASG
  # pMaxInstanceCount:
  #   Type: String
  #   Description: Max Instance Count for EC2 ASG
  # pDevInstanceCount:
  #   Type: String
  #   Description: Instance Count for EC2 ASG in Dev
  #   Default: will be overridden in dev
  # pDevMaxInstanceCount:
  #   Type: String
  #   Description: Max Instance Count for EC2 ASG in Dev
  #   Default: will be overridden in dev
  pInstanceWarmup:
    Type: String
    Description: Time in Seconds from Instance Launch Before Contributing to Scaling Metrics
    Default: 720
  pInstanceType:
    Type: String
    Description: Instance size for app
    Default: c5a.large
  pAutoscalingCPUTarget:
    Type: String
    Description: Target % of CPU Usage to Target for the Application ASG
    Default: 70 #(change 80 for dev )
  # pArtifactBucketKeyArn:
  #   Type: String
  #   Description: Arn of the Deployment Account Artifact Bucket KMS Key
  # pDbCidr:
  #   Type: CommaDelimitedList
  #   Description: Database Subnet CIDR blocks
  
  ## AmazonMQ specific Parameters
  pLambdaCodeBucket:
    Type: String
    Description: S3 Bucket that contains the Lambda Code for RabbitMQ
    Default: "cf-templates--us-east-1"
  pObjectVersion:
    Type: String
    Description: S3 Version of the Lambda Code to use
    Default: "1"
  pAppSubnet1:
    Type: String
    Description: AppSubnet1 ID
    Default: 'subnet-1'
  # pAppSubnet2:
  #   Type: String
  #   Description: AppSubnet2 ID
  #   Default: 'None'
  # pAppSubnet3:
  #   Type: String
  #   Description: AppSubnet3 ID
  #   Default: 'None'
  pAdminUsername:
    Description: The admin username for RabbitMQ (Can't contain commas, colons, equals signs, or spaces)
    Type: String
    Default: rabbit-admin
    MinLength: 12
  # pMQcidr1:
  #   Description: CIDR Range for Intra1 subnet for MQ Custom DNS
  #   Type: String
  # pMQcidr2:
  #   Description: CIDR Range for Intra2 subnet for MQ Custom DNS
  #   Type: String
  # pMQcidr3:
  #   Description: CIDR Range for Intra3 subnet for MQ Custom DNS
  #   Type: String
    
  # pPostgreSQLIP:
  #   Description: IP address of the team Destination DB Cluster
  #   Type: String

Conditions:
  cIsMainRegion: !Equals [!Ref AWS::Region, !Ref pMainRegion]
  cIsR2: !Not [!Condition cIsMainRegion]
  cIsR2Active: !Equals [!Ref pRegion2Active, "Yes"]
  cIsR2andActive: !And [!Condition cIsR2, !Condition cIsR2Active]
  cIsR2ActiveOrIsMain: !Or [!Condition cIsMainRegion, !Condition cIsR2andActive]
  #cIsPreProd: !Equals [!Ref pEnvironment, "preprod"]
  cIsProd: !Equals [!Ref pEnvironment, "prod"]
  cIsNonProd: !Not [!Condition cIsProd]
  cIsDev: !Equals [!Ref pEnvironment, "dev"]
  #cIsapp3: !Or [!Condition cIsDev, !Condition cIsProd] ## Create app3 Server when environment is 'dev' or 'prod'
  # cIsPreProd: !Equals [!Ref pEnvironment, "preprod"]
  # cIsEitherProd: !Or [!Condition cIsPreProd, !Condition cIsProd]

Resources:
  ## Application server cluster IAM resources
  rApplicationInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pProduct}-role-${pEnvironment}-instance-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      #PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/team-fed-svcrole-boundary
      Policies:
        - PolicyName: AllowKMSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:   
              - Sid: allowsecretaccess
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: 
                  #- !ImportValue iSSPubArn
                  #- !ImportValue iSSPrivArn
                  #- !Sub arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:ab-app-aurora-postgresql/aurora/*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:ab-app-app-secret-${pEnvironment}-rabbituser*
                  #- !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${pProduct}-secret-${pEnvironment}-iotOracledbPassword*
              - Sid: allowkmsforsecrets
                Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
                Condition:
                  ForAnyValue:StringLike:
                    kms:ResourceAliases:
                      #- !Sub alias/ab-app2-app-app-ss-secrets
                      #- !Sub alias/ab-app-aurora-postgresql-db-root-secret-key
                      #- !Sub alias/ab-app-aurora-postgresql-db-user-secret-key
                      #- !Sub alias/ab-app-aurora-postgresql-AuroraClusterKey
                      - !Sub alias/${pProduct}-rabbit-user-pwd-key
                      #- !Sub alias/${pProduct}-iotOracledb-pwd-key
              # - Sid: allowkmsfors3
              #   Effect: Allow
              #   Action:
              #     - kms:DescribeKey
              #     - kms:Decrypt
              #     - kms:Encrypt
              #     - kms:GenerateDataKey
              #   Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
              #   Condition:
              #     ForAnyValue:StringLike:
              #       kms:ResourceAliases:
              #         - !Sub alias/ab-app2-app-app-alias-${pEnvironment}-userdata-${AWS::Region}
              #         - !Sub alias/ab-app2-app-app-alias-${pEnvironment}-userdata
              - Sid: allowkmsfordepls3
                Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-role-${pEnvironment}-instance-${AWS::Region}
        - Key: team:lifecycle
          Value: !Ref pEnvironment
        - Key: team:vsad
          Value: !Ref pVsadTag
        - Key: team:vast-id
          Value: !Ref pVastTag
        - Key: team:purpose
          Value: IAM Role for Application EC2 Instance
        - Key: team:dataclass
          Value: !Ref pTagteamDataclass
        - Key: team:launched-by
          Value: !Ref pTagteamLaunchedBy
        - Key: team:resource-custodian
          Value: !Ref pTagteamResourceCustodian
        - Key: team:team-owner
          Value: !Ref pTagteamTeamOwner

  rApplicationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref rApplicationInstanceRole

  rApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${pProduct}-secgroup-${pEnvironment}-instances
      VpcId: !Ref pVPCId
      GroupDescription: Enable Outbound Internet and Console NLB Ingress Access to Application Instances
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 127.0.0.1/32
          Description: Default local host all traffic
      SecurityGroupEgress:
        ##RabbitMQ
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          DestinationSecurityGroupId: !Ref rRabbitMQClusterSecurityGroup
          Description: Egress to Amazon MQ for Rabbit MQ
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          DestinationSecurityGroupId: !Ref rRabbitMQClusterSecurityGroup
          Description: Egress to Amazon MQ for Rabbit MQ  
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          CidrIp: '10.0.0.0/24' #!Ref pMQcidr1
          Description: Egress to IntraSubnet1 for Rabbit MQ Custom DNS


  rApplicationInstanceASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    # CreationPolicy:
    #   ResourceSignal:
    #     Count: 
    #       !If
    #         - cIsMainRegion
    #         - !If
    #             - cIsDev
    #             - 1 #!Ref pDevInstanceCount
    #             - 1 #!Ref pInstanceCount
    #         - !If
    #             - cIsR2andActive
    #             - !If
    #                 - cIsDev
    #                 - 1 #!Ref pDevInstanceCount
    #                 - 1 #!Ref pInstanceCount
    #             - 0 # First deployment to R2 behavior (starting on or off)
    #     Timeout: PT18M
    # UpdatePolicy:
    #   AutoScalingRollingUpdate:
    #     !If
    #       - cIsMainRegion
    #       - 
    #         PauseTime: PT18M # Region 1 constant behavior
    #         WaitOnResourceSignals: true
    #       - !If
    #           - cIsR2andActive
    #           - 
    #             PauseTime: PT18M # Region 2 activated/updated behavior
    #             WaitOnResourceSignals: true
    #           - 
    #             !Ref AWS::NoValue # Tear down R2 behavior
    Properties:
      AutoScalingGroupName: !Sub ${pProduct}-asg-${pEnvironment}-instances-1
      MinSize:
        !If
          - cIsR2ActiveOrIsMain
          - !If
            - cIsDev
            - 1 #!Ref pDevInstanceCount
            - 1 #!Ref pInstanceCount
          - '0'
      MaxSize: 
        !If 
          - cIsR2ActiveOrIsMain
          - !If
            - cIsDev
            - 1 #!Ref pDevMaxInstanceCount
            - 1 #!Ref pMaxInstanceCount
          - '0'
      DesiredCapacity: 
        !If 
          - cIsR2ActiveOrIsMain
          - !If
            - cIsDev
            - 1 #!Ref pDevInstanceCount
            - 1 #!Ref pInstanceCount
          - '0'
      # TargetGroupARNs:
      #   - !Ref rApplicationTargetGroupConsole
      #   - !Ref rApplicationTargetGroupPublic
      #   - !Ref rApplicationTargetGroupPubliciot
      #   - !Ref rApplicationTargetGroupConsoleiot
      HealthCheckGracePeriod: 300
      NewInstancesProtectedFromScaleIn: false
      LaunchTemplate:
        LaunchTemplateId: !Ref rApplicationLaunchTemplate
        Version: !GetAtt rApplicationLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier: !Ref pAppSubnets
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-asg-${pEnvironment}-instances
          PropagateAtLaunch: false

  rApplicationASGScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AutoScalingGroupName: !Ref rApplicationInstanceASG
      EstimatedInstanceWarmup: !Ref pInstanceWarmup
      # MetricAggregationType: Average
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref pAutoscalingCPUTarget

  rApplicationLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${pProduct}-launchtemp-${pEnvironment}-instances
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: !If [cIsNonProd, 50, 100]
              VolumeType: gp3
          - DeviceName: /dev/xvdf # /dev/sdf
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: !If [cIsNonProd, 150, 200]
              VolumeType: sc1
        IamInstanceProfile:
          Name: !Ref rApplicationInstanceProfile
        ImageId: ami-7 #ami-6
        InstanceType: !Ref pInstanceType #c5a.large
        MetadataOptions:
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 2
          HttpTokens: required
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - !Ref rApplicationSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value: !Sub ${pProduct}-${pEnvironment}-instance
              - Key: team:launched-by
                Value: !Ref pTagteamLaunchedBy
              - Key: team:resource-custodian
                Value: !Ref pTagteamResourceCustodian
              - Key: team:team-owner
                Value: !Ref pTagteamTeamOwner
              - Key: team:customer-data
                Value: !Ref pTagteamCustomerData
              - Key: team:dataclass
                Value: !Ref pTagteamDataclass
              - Key: team:ec2:os
                Value: amazon.linux.2
              - Key: team:vast-id
                Value: !Ref pVastTag
              - Key: team:vsad
                Value: !Ref pVsadTag
              - Key: team:purpose
                Value: Application Instance
              - Key: team:lifecycle
                Value: !Ref pEnvironment
              - Key: team:role
                Value: !Ref pTagteamRole

  ### AmazonMQ Resources
  rRabbitPasswordKMSKeyAlias:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${pProduct}-rabbit-pwd-key
      TargetKeyId: !Ref rRabbitPasswordKMSKey

  rRabbitPasswordKMSKey:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for Rabbit Password Secret
      Enabled: !!bool 'true'
      EnableKeyRotation: !!bool 'true'
      KeyPolicy:
        Version: '2012-10-17'
        Id: team-key-default
        Statement:
          - Sid: Enable IAM and allow interactive (human) role(s) key use permissions
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            - kms:*
            Resource: '*'
            Condition:
              ArnLike:
                aws:PrincipalArn:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: Enable IAM and allow service (non-human) role(s) key use permissions
            Effect: Allow
            Principal:
              AWS: !GetAtt rRabbitConfigureRole.Arn
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            Resource: '*'
            Condition:
              'Null':
                kms:ViaService: !!bool 'false'
              ArnLike:
                aws:PrincipalArn:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: Allow service (non-human) role(s) grant operations on CMK
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/cloudformationservicerole
            Action:
            - kms:CreateGrant
            - kms:ListGrants
            - kms:RetireGrant
            - kms:RevokeGrant
            - kms:*
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: !!bool 'true'
              StringEquals:
                aws:PrincipalAccount: !Ref AWS::AccountId
            # - Sid: Key administration permissions
            #   Effect: Allow
            #   Principal:
            #     AWS:
            #     - Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            #   Action:
            #   - kms:*
            #   Resource: '*'
      PendingWindowInDays: !!int '30'
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-kms-${pEnvironment}-rabbitpwd

  rRabbitPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${pProduct}-secret-${pEnvironment}-rabbitpwd
      Description: The password for the rabbit-admin user in RabbitMQ
      KmsKeyId: !Ref rRabbitPasswordKMSKey
      GenerateSecretString:
        PasswordLength: 15
        ExcludeCharacters: ',:='
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-secret-${pEnvironment}-rabbitpwd

  rRabbitUserPasswordKMSKeyAlias:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${pProduct}-rabbit-user-pwd-key
      TargetKeyId: !Ref rRabbitUserPasswordKMSKey

  rRabbitUserPasswordKMSKey:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for Rabbit User Password Secret
      Enabled: !!bool 'true'
      EnableKeyRotation: !!bool 'true'
      KeyPolicy:
        Version: '2012-10-17'
        Id: team-key-default
        Statement:
          - Sid: Enable IAM and allow interactive (human) role(s) key use permissions
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            - kms:*
            Resource: '*'
            Condition:
              ArnLike:
                aws:PrincipalArn:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: Enable IAM and allow service (non-human) role(s) key use permissions
            Effect: Allow
            Principal:
              AWS: !GetAtt rRabbitConfigureRole.Arn
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            Resource: '*'
            Condition:
              'Null':
                kms:ViaService: !!bool 'false'
              ArnLike:
                aws:PrincipalArn:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: Allow service (non-human) role(s) grant operations on CMK
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/cloudformationservicerole
            Action:
            - kms:CreateGrant
            - kms:ListGrants
            - kms:RetireGrant
            - kms:RevokeGrant
            - kms:*
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: !!bool 'true'
              StringEquals:
                aws:PrincipalAccount: !Ref AWS::AccountId
      PendingWindowInDays: !!int '30'
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-kms-${pEnvironment}-rabbituserpwd

  rRabbituserPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${pProduct}-secret-${pEnvironment}-rabbituserpwd
      Description: The password for the app-app user in RabbitMQ
      KmsKeyId: !Ref rRabbitUserPasswordKMSKey
      GenerateSecretString:
        PasswordLength: 15
        ExcludeCharacters: ',:='
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-secret-${pEnvironment}-rabbituserpwd

  rRabbitMQClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${pProduct}-secgroup
      VpcId: !Ref pVPCId
      GroupDescription: Enable RabbitMQ Access within SecGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 127.0.0.1/32
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/16
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
        - IpProtocol: tcp
          CidrIp: !Ref pAppSubnetCIDR1
          FromPort: 5671
          ToPort: 5671
          Description: Allowing inbound from App Subnet1
        - IpProtocol: tcp
          CidrIp: !Ref pAppSubnetCIDR1
          FromPort: 443
          ToPort: 443
          Description: Allowing inbound from App Subnet1
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-secgroup-${pEnvironment}-rabbitcluster
        - Key: team:lifecycle
          Value: !Ref pEnvironment
        - Key: team:vsad
          Value: !Ref pVsadTag
        - Key: team:vast
          Value: !Ref pVastTag
        - Key: team:purpose
          Value: Security Group for RabbitMQ cluster
        - Key: team:dataclass
          Value: !Ref pTagteamDataclass
        - Key: team:launched-by
          Value: !Ref pTagteamLaunchedBy
        - Key: team:resource-custodian
          Value: !Ref pTagteamResourceCustodian
        - Key: team:team-owner
          Value: !Ref pTagteamTeamOwner
  
  rRabbitMQInternalEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref rRabbitMQClusterSecurityGroup
      IpProtocol: '-1'
      DestinationSecurityGroupId: !Ref rRabbitMQClusterSecurityGroup

  rRabbitBroker:
    #Condition: cIsR2ActiveOrIsMain
    Type: AWS::AmazonMQ::Broker
    Properties:
      AutoMinorVersionUpgrade: false # @Product Team
      BrokerName: !Sub ${pProduct}-mqbroker-${pEnvironment}-rabbitmq-1
      DeploymentMode: SINGLE_INSTANCE
                          #!If 
      #                   - cIsProd
      #                   - CLUSTER_MULTI_AZ
      #                   - !If
      #                     - cIsPreProd
      #                     - CLUSTER_MULTI_AZ
                          
      EngineType: RABBITMQ
      EngineVersion: 3.9.13
      
      HostInstanceType: mq.m5.large
      Logs:
        General: true
      MaintenanceWindowStartTime: # Team
        DayOfWeek: Monday
        TimeOfDay: "00:00"
        TimeZone: America/Chicago
      PubliclyAccessible: false
      SecurityGroups: [!Ref rRabbitMQClusterSecurityGroup]
      SubnetIds: 
        - !Ref pAppSubnet1
                  #!If
                    #- cIsProd
                    # - [!Ref pAppSubnet1, !Ref pAppSubnet2, !Ref pAppSubnet3]
                    # - !If
                    #   - cIsPreProd
                    #   - [!Ref pAppSubnet1, !Ref pAppSubnet2, !Ref pAppSubnet3]
                    #   - [!Ref pAppSubnet1]
      Users: 
        - 
          Password: !Sub '{{resolve:secretsmanager:${rRabbitPasswordSecret}:SecretString}}'
          Username: !Ref pAdminUsername

      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-mqbroker-${pEnvironment}-rabbitcluster

    
  rRabbitConfigureFunction:
    #Condition: cIsMainRegion
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${pProduct}-lambda-${pEnvironment}-configure-rabbit
      CodeUri:
        Bucket: !Ref pLambdaCodeBucket
        Key: my-app/RabbitLambda.zip
        Version: !Ref pObjectVersion
      Environment:
        Variables:
          SECRET_ARN: !Ref rRabbitPasswordSecret
          RABBIT_ENDPOINT: !Sub ${rRabbitBroker}.mq.${AWS::Region}.amazonaws.com
          ENVIRONMENT: dev
      PackageType: Zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref rRabbitMQClusterSecurityGroup
        SubnetIds:
          - !Ref pAppSubnet1
      Handler: app.handler
      Role: !GetAtt rRabbitConfigureRole.Arn
      Runtime: python3.9
      Timeout: 30
      Tags:
        Name: !Sub ${pProduct}-lambda-${pEnvironment}-configure-rabbit
        team:lifecycle : !Ref pEnvironment
        team:vsad : !Ref pVsadTag
        team:vast-id : !Ref pVastTag
        team:purpose: Lambda function to configure RabbitMQ Cluster
        team:dataclass: !Ref pTagteamDataclass
        team:launched-by: !Ref pTagteamLaunchedBy
        team:resource-custodian: !Ref pTagteamResourceCustodian
        team:team-owner: !Ref pTagteamTeamOwner
  
  rRabbitConfigureCustomResource:
    #Condition: cIsMainRegion
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rRabbitConfigureFunction.Arn
      Version: 2 # Increment this when you need the code to be run again

  rRabbitConfigureRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: rabbitmq-configure-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      # PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/team-fed-svcrole-boundary
      Policies:
        - PolicyName: secretsmanager
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                  - secretsmanager:ListSecrets
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:* # !Ref rRabbitPasswordSecret # Manually enter role name as to break circular dependency 
        - PolicyName: allowkmsforsecret
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:*
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
        - PolicyName: lambdainvpc
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddress
                  - ec2:UnassignPrivateIpAddress
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${pProduct}-iamrole-${pEnvironment}-rabbit-configure-${AWS::Region}
        - Key: team:lifecycle
          Value: !Ref pEnvironment
        - Key: team:vsad
          Value: !Ref pVsadTag
        - Key: team:vast
          Value: !Ref pVastTag
        - Key: team:purpose
          Value: IAM Role for RabbitConfigure Lambda Function
        - Key: team:dataclass
          Value: !Ref pTagteamDataclass
        - Key: team:launched-by
          Value: !Ref pTagteamLaunchedBy
        - Key: team:resource-custodian
          Value: !Ref pTagteamResourceCustodian
        - Key: team:team-owner
          Value: !Ref pTagteamTeamOwner

# Outputs:
#   oApplicationTargetGroupPublic:
#     Description: Target Group for Public ALB
#     Value: !Ref rApplicationTargetGroupPublic 
#     Export:
#       Name: !Sub "${AWS::StackName}-appAppPublicTG" 
#   oApplicationTargetGroupPubliciot:
#     Description: Target Group for Public ALB
#     Value: !Ref rApplicationTargetGroupPublic
#     Export:
#       Name: !Sub "${AWS::StackName}-appAppPublicTG" 
#   oApplicationTargetGroupConsole:
#     Description: Target group for Console ALB
#     Value: !Ref rApplicationTargetGroupConsole
#     Export:
#       Name: !Sub "${AWS::StackName}-appAppConsoleTG"
#   oApplicationTargetGroupConsole:
#     Description: Target group for Console ALB
#     Value: !Ref rApplicationTargetGroupConsole
#     Export:
#       Name: !Sub "${AWS::StackName}-appAppConsoleTG"
#   oPublicALBSecurityGroup01:
#     Description: Public ALB Security Group
#     Value: 
#       !GetAtt
#         - rPublicALBSecurityGroup01
#         - GroupId
#     Export:
#       Name: !Sub "${AWS::StackName}-appPublicALBSG-01"
#   oConsoleALBSecurityGroup:
#     Description: Console ALB Security Group
#     Value: 
#       !GetAtt
#         - rConsoleALBSecurityGroup  
#         - GroupId
#     Export:
#       Name: !Sub "${AWS::StackName}-appConsoleALBSG"
#   oapp3NetworkLoadBalancer:
#     Description: Console NLB
#     Value:
#       !GetAtt
#         - rapp3NetworkLoadBalancer
#         - DNSName
#     Export:
#       Name: !Sub "${AWS::StackName}-app3NetworkLoadBalancer"
#   oapp3NetworkLoadBalancerId:
#     Description: Console NLB Hosted zone ID
#     Value:
#       !GetAtt
#         - rapp3NetworkLoadBalancer
#         - CanonicalHostedZoneID
#     Export:
#       Name: !Sub "${AWS::StackName}-app3NetworkLoadBalancerID"
  
#   oDBNetworkLoadBalancer:
#     Description: Console NLB for DB
#     Value:
#       !GetAtt
#         - rDBNetworkLoadBalancer
#         - DNSName
#     Export:
#       Name: !Sub "${AWS::StackName}-DBNetworkLoadBalancer"
#   oDBNetworkLoadBalancerId:
#     Description: Console NLB for DB Hosted zone ID
#     Value:
#       !GetAtt
#         - rDBNetworkLoadBalancer
#         - CanonicalHostedZoneID
#     Export:
#       Name: !Sub "${AWS::StackName}-DBNetworkLoadBalancerID"
