AWSTemplateFormatVersion: 2010-09-09
Description: Template for RabbitMQ with AutoImport
Transform: 'AWS::Serverless-2016-10-31' # Remove if not using a serverless function

Parameters:
  pProduct:
    Description: Name of the instance
    Type: String
    Default: 'is'
  pEnvironment:
    Description: Environment Name
    Type: String
    Default: 'dev'

  ## App Specific Parameters
  pVPCId:
    Description: VPC ID
    Type: String
    Default: 'vpc-098f2593862b9767b'
  # pAppSubnets:
  #   Description: An Array of the App Subnet IDs
  #   Type: List<AWS::EC2::Subnet::Id>
  #   Default: subnet-02ad3496839c3117a #more
  pAppSubnetCIDR1:
    Description: An Array of the Intranet Subnet IDs
    Type: String
    Default: '10.0.1.0/24'
  # pAppSubnetCIDR2:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: String
  # pAppSubnetCIDR3:
  #   Description: An Array of the Intranet Subnet IDs
  #   Type: String
  pInstanceCount:
    Type: String
    Description: Instance Count for EC2 ASG
    Default: '1'
  pInstanceType:
    Type: String
    Description: Instance size for app
    Default: c5a.large
  
  ## AmazonMQ specific Parameters
  pLambdaCodeBucket:
    Type: String
    Description: S3 Bucket that contains the Lambda Code for RabbitMQ
    Default: "cf-templates-s3uaul2id9rr-us-east-1"
  pObjectVersion:
    Type: String
    Description: S3 Version of the Lambda Code to use
    Default: "1"
  pAppSubnet1: # Duplicate?
    Type: String
    Description: AppSubnet1 ID
    Default: 'subnet-02ad3496839c3117a'
  # pAppSubnet2:
  #   Type: String
  #   Description: AppSubnet2 ID
  #   Default: 'None'
  # pAppSubnet3:
  #   Type: String
  #   Description: AppSubnet3 ID
  #   Default: 'None'
  pAdminUsername:
    Description: The admin username for RabbitMQ (Can't contain commas, colons, equals signs, or spaces)
    Type: String
    Default: rabbit-admin
    MinLength: '12'

Resources:
  ## Application server cluster IAM resources
  rApplicationInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pProduct}-role-${pEnvironment}-instance-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      #PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/team-fed-svcrole-boundary
      Policies:
        - PolicyName: AllowKMSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:   
              - Sid: allowsecretaccess
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: 
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:ab-app-app-secret-${pEnvironment}-rabbituser*
              - Sid: allowkmsforsecrets
                Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
                Condition:
                  ForAnyValue:StringLike:
                    kms:ResourceAliases:
                      - !Sub alias/${pProduct}-rabbit-user-pwd-key
              # - Sid: allowkmsfors3
              #   Effect: Allow
              #   Action:
              #     - kms:DescribeKey
              #     - kms:Decrypt
              #     - kms:Encrypt
              #     - kms:GenerateDataKey
              #   Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
              #   Condition:
              #     ForAnyValue:StringLike:
              #       kms:ResourceAliases:
              #         - !Sub alias/ab-app2-app-app-alias-${pEnvironment}-userdata-${AWS::Region}
              #         - !Sub alias/ab-app2-app-app-alias-${pEnvironment}-userdata
              - Sid: allowkmsfordepls3
                Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                Resource: '*'

  rApplicationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref rApplicationInstanceRole

  rApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${pProduct}-secgroup-${pEnvironment}-instances
      VpcId: !Ref pVPCId
      GroupDescription: Enable Outbound Internet and Console NLB Ingress Access to Application Instances
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: 127.0.0.1/32
          Description: Default local host all traffic
      SecurityGroupEgress:
        ##RabbitMQ
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          DestinationSecurityGroupId: !Ref rRabbitMQClusterSecurityGroup
          Description: Egress to Amazon MQ for Rabbit MQ
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          DestinationSecurityGroupId: !Ref rRabbitMQClusterSecurityGroup
          Description: Egress to Amazon MQ for Rabbit MQ  
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          CidrIp: '10.0.1.0/24' #!Ref pMQcidr1
          Description: Egress to IntraSubnet1 for Rabbit MQ Custom DNS

  rApplicationInstanceASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${pProduct}-asg-${pEnvironment}-instances-1
      MinSize: !Ref pInstanceCount
      MaxSize: !Ref pInstanceCount
      DesiredCapacity: !Ref pInstanceCount
      HealthCheckGracePeriod: 300
      NewInstancesProtectedFromScaleIn: false
      LaunchTemplate:
        LaunchTemplateId: !Ref rApplicationLaunchTemplate
        Version: !GetAtt rApplicationLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier: 
       - !Ref pAppSubnet1
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"

  rApplicationLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${pProduct}-launchtemp-${pEnvironment}-instances
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: 50
              VolumeType: gp3
          - DeviceName: /dev/xvdf # /dev/sdf
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: 50
              VolumeType: sc1
        IamInstanceProfile:
          Name: !Ref rApplicationInstanceProfile
        ImageId: ami-026c9a2324f95056d
        InstanceType: !Ref pInstanceType
        MetadataOptions:
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 2
          HttpTokens: required
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - !Ref rApplicationSecurityGroup

  ### AmazonMQ Resources
  rRabbitPasswordKMSKeyAlias:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${pProduct}-rabbit-pwd-key
      TargetKeyId: !Ref rRabbitPasswordKMSKey

  rRabbitPasswordKMSKey:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for Rabbit Password Secret
      Enabled: !!bool 'true'
      EnableKeyRotation: !!bool 'true'
      KeyPolicy:
        Version: '2012-10-17'
        Id: team-key-default
        Statement:
          - Sid: Enable IAM and allow interactive (human) role(s) key use permissions
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            - kms:*
            Resource: '*'
            Condition:
              ArnLike:
                aws:PrincipalArn:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: Enable IAM and allow service (non-human) role(s) key use permissions
            Effect: Allow
            Principal:
              AWS: !GetAtt rRabbitConfigureRole.Arn
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            Resource: '*'
            Condition:
              'Null':
                kms:ViaService: !!bool 'false'
              ArnLike:
                aws:PrincipalArn:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: Allow service (non-human) role(s) grant operations on CMK
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/cloudformationservicerole
            Action:
            - kms:CreateGrant
            - kms:ListGrants
            - kms:RetireGrant
            - kms:RevokeGrant
            - kms:*
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: !!bool 'true'
              StringEquals:
                aws:PrincipalAccount: !Ref AWS::AccountId
            # - Sid: Key administration permissions
            #   Effect: Allow
            #   Principal:
            #     AWS:
            #     - Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            #   Action:
            #   - kms:*
            #   Resource: '*'
      PendingWindowInDays: !!int '30'

  rRabbitPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${pProduct}-secret-${pEnvironment}-rabbitpwd
      Description: The password for the rabbit-admin user in RabbitMQ
      KmsKeyId: !Ref rRabbitPasswordKMSKey
      GenerateSecretString:
        PasswordLength: 15
        ExcludeCharacters: ',:='

  rRabbitUserPasswordKMSKeyAlias:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${pProduct}-rabbit-user-pwd-key
      TargetKeyId: !Ref rRabbitUserPasswordKMSKey

  rRabbitUserPasswordKMSKey:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for Rabbit User Password Secret
      Enabled: !!bool 'true'
      EnableKeyRotation: !!bool 'true'
      KeyPolicy:
        Version: '2012-10-17'
        Id: team-key-default
        Statement:
          - Sid: Enable IAM and allow interactive (human) role(s) key use permissions
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            - kms:*
            Resource: '*'
            Condition:
              ArnLike:
                aws:PrincipalArn:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: Enable IAM and allow service (non-human) role(s) key use permissions
            Effect: Allow
            Principal:
              AWS: !GetAtt rRabbitConfigureRole.Arn
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            Resource: '*'
            Condition:
              'Null':
                kms:ViaService: !!bool 'false'
              ArnLike:
                aws:PrincipalArn:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/*
          - Sid: Allow service (non-human) role(s) grant operations on CMK
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/cloudformationservicerole
            Action:
            - kms:CreateGrant
            - kms:ListGrants
            - kms:RetireGrant
            - kms:RevokeGrant
            - kms:*
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: !!bool 'true'
              StringEquals:
                aws:PrincipalAccount: !Ref AWS::AccountId
      PendingWindowInDays: !!int '30'

  rRabbituserPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${pProduct}-secret-${pEnvironment}-rabbituserpwd
      Description: The password for the app-app user in RabbitMQ
      KmsKeyId: !Ref rRabbitUserPasswordKMSKey
      GenerateSecretString:
        PasswordLength: 15
        ExcludeCharacters: ',:='

  rRabbitMQClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${pProduct}-secgroup
      VpcId: !Ref pVPCId
      GroupDescription: Enable RabbitMQ Access within SecGroup
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: 127.0.0.1/32
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/16
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
        - IpProtocol: tcp
          CidrIp: !Ref pAppSubnetCIDR1
          FromPort: 5671
          ToPort: 5671
          Description: Allowing inbound from App Subnet1
        - IpProtocol: tcp
          CidrIp: !Ref pAppSubnetCIDR1
          FromPort: 443
          ToPort: 443
          Description: Allowing inbound from App Subnet1
  
  rRabbitMQInternalEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref rRabbitMQClusterSecurityGroup
      IpProtocol: '-1'
      DestinationSecurityGroupId: !Ref rRabbitMQClusterSecurityGroup

  rRabbitBroker:
    Type: AWS::AmazonMQ::Broker
    Properties:
      AutoMinorVersionUpgrade: false
      BrokerName: !Sub ${pProduct}-mqbroker-${pEnvironment}-rabbitmq-1
      DeploymentMode: SINGLE_INSTANCE # CLUSTER_MULTI_AZ
      EngineType: RABBITMQ
      EngineVersion: 3.9.13
      HostInstanceType: mq.m5.large
      Logs:
        General: true
      MaintenanceWindowStartTime:
        DayOfWeek: Monday
        TimeOfDay: "00:00"
        TimeZone: America/Chicago
      PubliclyAccessible: false
      SecurityGroups: [!Ref rRabbitMQClusterSecurityGroup]
      SubnetIds: 
        - !Ref pAppSubnet1
        # - !Ref pAppSubnet2
        # - !Ref pAppSubnet3
      Users: 
        - 
          Password: !Sub '{{resolve:secretsmanager:${rRabbitPasswordSecret}:SecretString}}'
          Username: !Ref pAdminUsername
    
  rRabbitConfigureFunction:
    #Condition: cIsMainRegion
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${pProduct}-lambda-${pEnvironment}-configure-rabbit
      CodeUri:
        Bucket: !Ref pLambdaCodeBucket
        Key: my-app/RabbitLambda.zip
        Version: !Ref pObjectVersion
      Environment:
        Variables:
          SECRET_ARN: !Ref rRabbitPasswordSecret
          RABBIT_ENDPOINT: !Sub ${rRabbitBroker}.mq.${AWS::Region}.amazonaws.com
          ENVIRONMENT: dev
      PackageType: Zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref rRabbitMQClusterSecurityGroup
        SubnetIds:
          - !Ref pAppSubnet1
      Handler: app.handler
      Role: !GetAtt rRabbitConfigureRole.Arn
      Runtime: python3.9
      Timeout: 30
  
  rRabbitConfigureCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rRabbitConfigureFunction.Arn
      Version: 1 # Increment this when you need the code to be run again

  rRabbitConfigureRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: rabbitmq-configure-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      # PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/team-fed-svcrole-boundary
      Policies:
        - PolicyName: secretsmanager
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                  - secretsmanager:ListSecrets
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:* # !Ref rRabbitPasswordSecret # Manually enter role name as to break circular dependency 
        - PolicyName: allowkmsforsecret
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:*
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
        - PolicyName: lambdainvpc
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddress
                  - ec2:UnassignPrivateIpAddress
                Resource: '*'